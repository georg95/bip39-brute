

let allWords = []
let DERIVE_ADDRESSES = 1
onmessage = async function (message) {
  const { mnemonicPartial, addrHash160list, addrTypes } = message.data;
  if (message.data.allWords) {
    allWords = message.data.allWords
  }
  if (message.data.deriveCount != undefined) {
    DERIVE_ADDRESSES = Math.max(1, message.data.deriveCount)
    console.log('DERIVE_ADDRESSES:', DERIVE_ADDRESSES)
  }
  const found = await bruteBtcAddr(mnemonicPartial, allWords, addrHash160list, addrTypes)
  postMessage(found)
}
const THREAD_NUM = Number(location.href.split('i=')[1])

async function getValidIndexes(allWords, parts) {
  const mnemoIndexes = mnemonicIndexes(parts[0] + 'pen' + parts[1], allWords)
  const wordIndex = parts[0].split(/\s+/).length - 1
  const validIndexes = []
  for (let i = 0; i < allWords.length; i++) {
    mnemoIndexes[wordIndex] = i
    if (await isValidMnemonic(mnemoIndexes)) { validIndexes.push(i) }
  }
  return validIndexes
}

async function bruteBtcAddr(mnemonicPartial, allWords, addrHash160list, addrTypes) {
  const keccak = await initKeccak
  if (allWords.length === 0) throw new Error('allWords is empty')
  var parts = mnemonicPartial.split('*')
  if (parts.length !== 2) throw new Error('one * supported')
  var seeds = []
  if (THREAD_NUM === 0 || THREAD_NUM === 1) {
    const validIndexes = await getValidIndexes(allWords, parts)
    for (let index of validIndexes) {
        const mnemonic = parts[0] + allWords[index] + parts[1]
        seeds.push(await mnemonicToSeed(mnemonic))
    }
  } else {
    seeds = await mnemonicToSeeds(mnemonicPartial)
  }

  let found = ''

  for (addrType of addrTypes) {
    const [network, coinType] = ADDRTYPEMAP[addrType];
    let reedemScript = new Uint8Array(22)
    reedemScript[0] = 0x00
    reedemScript[1] = 0x14
    let i = 0
    for (let seed of seeds) {
      let privKeys = await derivePath(seed, network, coinType)
      for (let privKey of privKeys) {
        let hash = null
        if (addrType === 'eth') { 
          const pubKey = getPublicKey(privKey, false) 
          hash = (await keccak(pubKey.slice(1))).slice(12)
        } else {
          const pubKey = getPublicKey(privKey)
          hash = await hash160(pubKey)
        }
        if (addrType === 'p2sh') {
          reedemScript.set(hash, 2)
          hash = await hash160(reedemScript)
        }
        for (let addrHash of addrHash160list) {
          if (addrHash[0] == hash[0] && addrHash[1] == hash[1] && bytesToHex(hash) === bytesToHex(addrHash)) {
            found = parts[0] + allWords[(await getValidIndexes(allWords, parts))[i]] + parts[1];
            console.log(`[${THREAD_NUM}] FOUND! ${found}\n`)
          }
        }
      }
      i++
    }
  }
  return found
}

const wasmInstancePbkdf2 = WebAssembly.instantiateStreaming(fetch('./wasm.wasm'))

async function mnemonicToSeedBench(LOOPS) {
  const {instance: { exports }} = await wasmInstancePbkdf2;
  const { pbkdf2_bench } = exports;
  return pbkdf2_bench(LOOPS);
}

async function mnemonicToSeeds(mnemonicPartial) {
  const {instance: { exports }} = await wasmInstancePbkdf2;
  const { pbkdf2, getMnemoPtr, getSeedsPtr, memory: {buffer} } = exports;
  const mnemoPtr = getMnemoPtr();
  const seedsPtr = getSeedsPtr();
  const mnemoMemory = new Uint8Array(buffer, mnemoPtr, mnemonicPartial.length);
  mnemoMemory.set(new TextEncoder().encode(mnemonicPartial));
  const seedsCount = pbkdf2(mnemonicPartial.length, 2048);
  const seedsMemory = new Uint8Array(buffer, seedsPtr, seedsCount * 64);
  const seedBytes = 64;
  const seeds = Array(seedsCount).fill(0).map((_, i) => seedsMemory.slice(i * seedBytes, (i + 1) * seedBytes));
  return seeds;
}


function mnemonicIndexes(mnemonic, wordlist) {
  const words = mnemonic.trim().toLowerCase().split(/\s+/);
  if (![12, 15, 18, 24].includes(words.length)) throw new Error(`invalid mnemonic length ${words.length}`);
  const indexes = words.map(word => wordlist.indexOf(word));
  if (indexes.includes(-1)) throw new Error(`invalid word ${words.find(word => wordlist.indexOf(word) === -1)}`)
  return indexes;
}

async function isValidMnemonic(indexes) {
  const entropyBytes = new Uint8Array(33);
  let acc = 0;
  let accBits = 0;
  var j = 0;
  for (let w of indexes) {
    acc = (acc << 11) | w;
    accBits += 11;
    while (accBits >= 8) {
      accBits -= 8;
      entropyBytes[j++] = (acc >>> accBits) & 0xff;
    }
  }
  if (indexes.length === 12) {
    const hash = new Uint8Array(await crypto.subtle.digest('SHA-256', entropyBytes.slice(0, 16)))
    return (indexes[11] & 0x0f) === hash[0] >> 4;
  } else if (indexes.length === 24) {
      const hash = new Uint8Array(await crypto.subtle.digest('SHA-256', entropyBytes.slice(0, 32)))
      return hash[0] === entropyBytes[32];
  } else if (indexes.length === 18) {
      const hash = new Uint8Array(await crypto.subtle.digest('SHA-256', entropyBytes.slice(0, 24)))
      return (hash[0] >> 2) === (indexes[17] & 0x3f);
  } else if (indexes.length === 15) {
      const hash = new Uint8Array(await crypto.subtle.digest('SHA-256', entropyBytes.slice(0, 20)))
      return ((hash[0] >> 3) & 0x1f) === (indexes[14] & 0x1f);
  }
  return false
}

const encoder = new TextEncoder()
const saltBuffer = encoder.encode("mnemonic")
async function mnemonicToSeed(mnemonic) {
  const mnemonicBuffer = encoder.encode(mnemonic)
  const keyMaterial = await crypto.subtle.importKey(
    "raw",
    mnemonicBuffer,
    { name: "PBKDF2" },
    false,
    ["deriveBits"]
  );
  const derivedBits = await crypto.subtle.deriveBits(
    {
      name: "PBKDF2",
      salt: saltBuffer,
      iterations: 2048,
      hash: "SHA-512"
    },
    keyMaterial,
    512
  );

  return new Uint8Array(derivedBits);
}

const CURVE_N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
const BITCOIN_SEED = new TextEncoder().encode('Bitcoin seed')
let mcryptoKey = null;
crypto.subtle.importKey("raw", BITCOIN_SEED, { name: "HMAC", hash: "SHA-512" }, false, ["sign"]).then(key => mcryptoKey = key);

const DATABUF = new Uint8Array(1 + 32 + 4);
const ADDRTYPEMAP = {
  'p2wphk': [84, 0],
  'p2pkh': [44, 0],
  'p2sh': [49, 0],
  'eth': [44, 60]
}
async function derivePath(seed, network, coinType) {
  const msignature = await crypto.subtle.sign("HMAC", mcryptoKey, seed)
  const master = new Uint8Array(msignature)
  let privKey = bytesToBigInt(master.slice(0, 32), 32); 
  let chainCode = master.slice(32)

  {
    DATABUF[0] = 0x00
    DATABUF.set(bigIntToBytes(privKey, 32), 1)
    DATABUF.set([128, 0, 0, network], 33)
    const cryptoKey = await crypto.subtle.importKey("raw", chainCode, { name: "HMAC", hash: "SHA-512" }, false, ["sign"]);
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, DATABUF);
    const I = new Uint8Array(signature);
    privKey = (bytesToBigInt(I.slice(0, 32)) + privKey) % CURVE_N;
    chainCode = I.slice(32)
  }
  {
    DATABUF[0] = 0x00
    DATABUF.set(bigIntToBytes(privKey, 32), 1)
    DATABUF.set([128, 0, 0, coinType], 33)
    const cryptoKey = await crypto.subtle.importKey("raw", chainCode, { name: "HMAC", hash: "SHA-512" }, false, ["sign"]);
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, DATABUF);
    const I = new Uint8Array(signature);
    privKey = (privKey + bytesToBigInt(I.slice(0, 32))) % CURVE_N;
    chainCode = I.slice(32)
  }
  {
    DATABUF[0] = 0x00
    DATABUF.set(bigIntToBytes(privKey, 32), 1)
    DATABUF.set([128, 0, 0, 0], 33)
    const cryptoKey = await crypto.subtle.importKey("raw", chainCode, { name: "HMAC", hash: "SHA-512" }, false, ["sign"]);
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, DATABUF);
    const I = new Uint8Array(signature);
    privKey = (bytesToBigInt(I.slice(0, 32)) + privKey) % CURVE_N;
    chainCode = I.slice(32)
  }
  {
    DATABUF.set([0, 0, 0, 0], 33)
    DATABUF.set(getPublicKey(privKey), 0)
    DATABUF[36] = 0x00
    const cryptoKey = await crypto.subtle.importKey("raw", chainCode, { name: "HMAC", hash: "SHA-512" }, false, ["sign"]);
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, DATABUF);
    const I = new Uint8Array(signature);
    privKey = (bytesToBigInt(I.slice(0, 32)) + privKey) % CURVE_N;
    chainCode = I.slice(32)
  }
  var privKeys = []
  DATABUF.set([0, 0, 0, 0], 33)
  DATABUF.set(getPublicKey(privKey), 0)
  const cryptoKey = await crypto.subtle.importKey("raw", chainCode, { name: "HMAC", hash: "SHA-512" }, false, ["sign"])
  for (let i = 0; i < DERIVE_ADDRESSES; i++) {
    DATABUF[36] = i
    const I = new Uint8Array(await crypto.subtle.sign("HMAC", cryptoKey, DATABUF))
    privKeys.push((bytesToBigInt(I.slice(0, 32)) + privKey) % CURVE_N)
  }

  return privKeys;
}  

function bytesToHex(bytes) {
  return Array.from(bytes).map(b => b.toString(16).padStart(2, '0')).join('');
}
function bytesToBigInt(bytes) {
  return BigInt('0x' + bytesToHex(bytes));
}
function bigIntToBytes(num, length) {
  let hex = num.toString(16).padStart(length * 2, '0');
  let bytes = new Uint8Array(length);
  for (let i = 0; i < length; i++) {
    bytes[i] = parseInt(hex.substr(i * 2, 2), 16);
  }
  return bytes;
}

async function hash160(buffer) {
  const hash = await crypto.subtle.digest("SHA-256", buffer)
  const message = new Uint8Array(hash)
  const {instance: { exports: { memory, get_ptr, digest }}} = await wasmInstance
  const cArray = new Uint8Array(memory.buffer, get_ptr(1), message.length)
  cArray.set(message)
  digest(message.length)
  return new Uint8Array(memory.buffer).slice(get_ptr(0), get_ptr(0) + 20)
}

function hexToUint8Array(hexString) {
    const bytes = [];
    for (let i = 0; i < hexString.length; i += 2) {
        bytes.push(parseInt(hexString.substr(i, 2), 16));
    }
    return new Uint8Array(bytes);
}

const KECCAK_WASM = hexToUint8Array(
"0061736d010000000105016000017f0302010005030100110619037f01418080c0000b7f0041c081c0000b7f00418082c0000b072204066d656d6f72" +
"790200096b656363616b323536000003494e500301034f555403020afa0901f70902027f2d7e2380808080004190026b2200248080808000024041c0" +
"00450d00200041086a41c081c0800041c000fc0a00000b41002101024041c801450d00200041c8006a410041c801fc0b000b02400340200141c00046" +
"0d01200041c8006a20016a200041086a20016a290000370300200141086a21010c000b0b20002903c801428080808080808080807f85210220002903" +
"8801420185210341c07e21012000290388022104200029038002210520002903f801210620002903f001210720002903e801210820002903e0012109" +
"20002903d801210a20002903d001210b20002903c001210c20002903b801210d20002903b001210e20002903a801210f20002903a001211020002903" +
"980121112000290390012112200029038001211320002903782114200029037021152000290368211620002903602117200029035821182000290350" +
"21192000290348211a037f024020010d0020002004370388022000200537038002200020063703f801200020073703f001200020083703e801200020" +
"093703e0012000200a3703d8012000200b3703d001200020023703c8012000200c3703c0012000200d3703b8012000200e3703b0012000200f3703a8" +
"01200020103703a001200020113703980120002012370390012000200337038801200020133703800120002014370378200020153703702000201637" +
"03682000201737036020002018370358200020193703502000201a370348410021010240034020014120460d012001418082c080006a200041c8006a" +
"20016a290300370000200141086a21010c000b0b20004190026a248080808000418082c080000f0b200c200885201185201585201a85221b200b2006" +
"85200f85201385201885221c42018985221d201485211e201b420189200a200585200e85200385201785221f85221b2004852120201c200920048520" +
"0d85201285201685222142018985221c200385423789222220022007852010852014852019852203201f42018985221f201885423e892223427f8583" +
"201d200785420289222485210420034201892021852218200c854229892221201b200d854227892225427f85832022852107201c2005854238892226" +
"201f200b85420f892227427f8583201d201085420a89222885210b202820182015854224892229427f8583201b201685421b89221685210c201f2013" +
"85420689222a201d201985420189222b427f85832018200885421289222c85210d201b200985420889222d201c200e85421989222e427f8583202a85" +
"2110201b201285421489221b201c201785421c892205427f8583201f200685423d89220685211220052006427f8583201d200285422d89221d852103" +
"2006201d427f858320182011854203892202852113201d2002427f8583201b8521142002201b427f858320058521152018201a85221d2020420e8922" +
"1b427f8583201c200a85421589221c852117201b201c427f8583201f200f85422b89221f852118201c201f427f8583201e422c89221c852119201f20" +
"1c427f8583200141c081c080006a29030085201d85211a200141086a210120232024427f8583202185210520242021427f8583202585210620252022" +
"427f8583202385210820292016427f8583202685210920162026427f8583202785210a20272028427f85832029852102202b202c427f8583202d8521" +
"0e202c202d427f8583202e85210f202e202a427f8583202b852111201c201d427f8583201b8521160c000b0b0bca010100418080c0000bc001010000" +
"000000000082800000000000008a8000000000008000800080000000808b800000000000000100008000000000818000800000008009800000000000" +
"808a00000000000000880000000000000009800080000000000a000080000000008b800080000000008b000000000000808980000000000080038000" +
"0000000080028000000000008080000000000000800a800000000000000a000080000000808180008000000080808000000000008001000080000000" +
"000880008000000080")

const initKeccak = (async function () {
  const {instance: { exports: { INP: { value: INP_PTR }, OUT: { value: OUT_PTR }, keccak256, memory: {buffer} } }} =
    await WebAssembly.instantiate(KECCAK_WASM)
  const inpMemory = new Uint8Array(buffer, INP_PTR, 64);
  const outMemory = new Uint8Array(buffer, OUT_PTR, 32);
  return function keccak(buf) {
    inpMemory.set(buf)
    keccak256()
    return outMemory
  }
})()

const WASM = [
  0, 97, 115, 109, 1, 0, 0, 0, 1, 15, 3, 96, 1, 127, 0, 96, 1, 127, 1, 127, 96,
  2, 127, 127, 0, 3, 6, 5, 1, 0, 2, 1, 0, 5, 3, 1, 0, 2, 6, 8, 1, 127, 1, 65,
  176, 137, 4, 11, 7, 29, 3, 6, 109, 101, 109, 111, 114, 121, 2, 0, 7, 103, 101,
  116, 95, 112, 116, 114, 0, 3, 6, 100, 105, 103, 101, 115, 116, 0, 4, 10, 165,
  48, 5, 37, 1, 1, 127, 3, 64, 32, 1, 65, 192, 0, 71, 4, 64, 32, 0, 32, 1, 106,
  65, 0, 58, 0, 0, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 0, 11, 211, 3,
  1, 8, 127, 65, 192, 8, 33, 4, 35, 0, 65, 224, 0, 107, 34, 3, 36, 0, 32, 3, 65,
  208, 0, 106, 65, 144, 8, 40, 2, 0, 54, 2, 0, 32, 3, 65, 136, 8, 41, 3, 0, 55,
  3, 72, 32, 3, 65, 128, 8, 41, 3, 0, 55, 3, 64, 32, 0, 65, 6, 118, 33, 8, 3,
  64, 32, 5, 32, 8, 71, 4, 64, 65, 0, 33, 1, 3, 64, 32, 1, 32, 4, 106, 33, 2,
  32, 1, 65, 192, 0, 71, 4, 64, 32, 1, 32, 3, 106, 34, 6, 32, 2, 45, 0, 0, 34,
  7, 54, 2, 0, 32, 6, 32, 7, 32, 2, 65, 1, 106, 45, 0, 0, 65, 8, 116, 114, 34,
  7, 54, 2, 0, 32, 6, 32, 2, 65, 2, 106, 45, 0, 0, 65, 16, 116, 32, 7, 114, 34,
  7, 54, 2, 0, 32, 6, 32, 2, 65, 3, 106, 45, 0, 0, 65, 24, 116, 32, 7, 114, 54,
  2, 0, 32, 1, 65, 4, 106, 33, 1, 12, 1, 11, 11, 32, 5, 65, 1, 106, 33, 5, 32,
  3, 65, 64, 107, 32, 3, 16, 2, 32, 2, 33, 4, 12, 1, 11, 11, 65, 0, 33, 5, 32,
  3, 16, 0, 33, 2, 32, 0, 65, 63, 113, 33, 3, 65, 0, 33, 1, 3, 64, 32, 1, 32, 3,
  71, 4, 64, 32, 2, 32, 1, 65, 124, 113, 106, 34, 6, 32, 6, 40, 2, 0, 32, 1, 32,
  4, 106, 45, 0, 0, 32, 5, 65, 24, 113, 116, 115, 54, 2, 0, 32, 5, 65, 8, 106,
  33, 5, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 2, 32, 0, 65, 60, 113,
  106, 34, 4, 32, 4, 40, 2, 0, 65, 1, 32, 0, 65, 3, 116, 34, 4, 65, 24, 113, 65,
  7, 114, 116, 115, 54, 2, 0, 32, 3, 65, 56, 79, 4, 64, 32, 2, 65, 64, 107, 32,
  2, 16, 2, 32, 2, 16, 0, 26, 11, 32, 2, 32, 4, 54, 2, 56, 32, 2, 32, 0, 65, 29,
  118, 54, 2, 60, 32, 2, 65, 64, 107, 32, 2, 16, 2, 65, 0, 33, 1, 3, 64, 32, 1,
  65, 20, 71, 4, 64, 32, 1, 65, 160, 8, 106, 34, 0, 32, 2, 65, 64, 107, 32, 1,
  106, 34, 4, 40, 2, 0, 34, 3, 58, 0, 0, 32, 0, 65, 2, 106, 32, 4, 47, 1, 2, 58,
  0, 0, 32, 0, 65, 3, 106, 32, 4, 45, 0, 3, 58, 0, 0, 32, 0, 65, 1, 106, 32, 3,
  65, 8, 118, 58, 0, 0, 32, 1, 65, 4, 106, 33, 1, 12, 1, 11, 11, 32, 2, 65, 224,
  0, 106, 36, 0, 11, 251, 43, 1, 32, 127, 32, 0, 32, 1, 40, 2, 44, 34, 25, 32,
  1, 40, 2, 40, 34, 15, 32, 1, 40, 2, 20, 34, 18, 32, 18, 32, 1, 40, 2, 52, 34,
  26, 32, 15, 32, 18, 32, 1, 40, 2, 28, 34, 20, 32, 1, 40, 2, 36, 34, 27, 32, 1,
  40, 2, 32, 34, 10, 32, 27, 32, 1, 40, 2, 24, 34, 22, 32, 20, 32, 25, 32, 22,
  32, 1, 40, 2, 4, 34, 19, 32, 0, 40, 2, 16, 34, 30, 106, 32, 0, 40, 2, 8, 34,
  31, 65, 10, 119, 34, 5, 32, 0, 40, 2, 4, 34, 29, 115, 32, 1, 40, 2, 0, 34, 23,
  32, 0, 40, 2, 0, 34, 32, 32, 0, 40, 2, 12, 34, 4, 32, 29, 32, 31, 115, 115,
  106, 106, 65, 11, 119, 32, 30, 106, 34, 17, 115, 106, 65, 14, 119, 32, 4, 106,
  34, 16, 65, 10, 119, 34, 3, 106, 32, 1, 40, 2, 16, 34, 21, 32, 29, 65, 10,
  119, 34, 7, 106, 32, 1, 40, 2, 8, 34, 24, 32, 4, 106, 32, 7, 32, 17, 115, 32,
  16, 115, 106, 65, 15, 119, 32, 5, 106, 34, 2, 32, 3, 115, 32, 1, 40, 2, 12,
  34, 28, 32, 5, 106, 32, 16, 32, 17, 65, 10, 119, 34, 17, 115, 32, 2, 115, 106,
  65, 12, 119, 32, 7, 106, 34, 16, 115, 106, 65, 5, 119, 32, 17, 106, 34, 6, 32,
  16, 65, 10, 119, 34, 8, 115, 32, 17, 32, 18, 106, 32, 16, 32, 2, 65, 10, 119,
  34, 17, 115, 32, 6, 115, 106, 65, 8, 119, 32, 3, 106, 34, 16, 115, 106, 65, 7,
  119, 32, 17, 106, 34, 3, 65, 10, 119, 34, 2, 106, 32, 27, 32, 6, 65, 10, 119,
  34, 6, 106, 32, 17, 32, 20, 106, 32, 6, 32, 16, 115, 32, 3, 115, 106, 65, 9,
  119, 32, 8, 106, 34, 17, 32, 2, 115, 32, 8, 32, 10, 106, 32, 3, 32, 16, 65,
  10, 119, 34, 16, 115, 32, 17, 115, 106, 65, 11, 119, 32, 6, 106, 34, 3, 115,
  106, 65, 13, 119, 32, 16, 106, 34, 6, 32, 3, 65, 10, 119, 34, 8, 115, 32, 2,
  32, 15, 32, 16, 106, 32, 3, 32, 17, 65, 10, 119, 34, 2, 115, 32, 6, 115, 106,
  65, 14, 119, 106, 34, 3, 115, 106, 65, 15, 119, 32, 2, 106, 34, 9, 65, 10,
  119, 34, 11, 106, 32, 3, 65, 10, 119, 34, 12, 32, 1, 40, 2, 60, 34, 17, 106,
  32, 8, 32, 26, 106, 32, 2, 32, 1, 40, 2, 48, 34, 16, 106, 32, 3, 32, 6, 65,
  10, 119, 34, 2, 115, 32, 9, 115, 106, 65, 6, 119, 32, 8, 106, 34, 3, 32, 9,
  32, 12, 115, 115, 106, 65, 7, 119, 32, 2, 106, 34, 6, 32, 3, 65, 10, 119, 34,
  8, 115, 32, 2, 32, 1, 40, 2, 56, 34, 1, 106, 32, 3, 32, 11, 115, 32, 6, 115,
  106, 65, 9, 119, 32, 12, 106, 34, 9, 115, 106, 65, 8, 119, 32, 11, 106, 34, 3,
  32, 9, 113, 32, 6, 65, 10, 119, 34, 6, 32, 3, 65, 127, 115, 113, 114, 106, 65,
  153, 243, 137, 212, 5, 106, 65, 7, 119, 32, 8, 106, 34, 2, 65, 10, 119, 34,
  11, 106, 32, 15, 32, 3, 65, 10, 119, 34, 12, 106, 32, 19, 32, 9, 65, 10, 119,
  34, 9, 106, 32, 6, 32, 26, 106, 32, 8, 32, 21, 106, 32, 2, 32, 3, 113, 32, 9,
  32, 2, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 6,
  119, 32, 6, 106, 34, 3, 32, 2, 113, 32, 12, 32, 3, 65, 127, 115, 113, 114,
  106, 65, 153, 243, 137, 212, 5, 106, 65, 8, 119, 32, 9, 106, 34, 2, 32, 3,
  113, 32, 11, 32, 2, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5,
  106, 65, 13, 119, 32, 12, 106, 34, 6, 32, 2, 113, 32, 3, 65, 10, 119, 34, 8,
  32, 6, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 11,
  119, 32, 11, 106, 34, 3, 32, 6, 113, 32, 2, 65, 10, 119, 34, 9, 32, 3, 65,
  127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 9, 119, 32, 8,
  106, 34, 2, 65, 10, 119, 34, 11, 106, 32, 23, 32, 3, 65, 10, 119, 34, 12, 106,
  32, 16, 32, 6, 65, 10, 119, 34, 6, 106, 32, 9, 32, 28, 106, 32, 8, 32, 17,
  106, 32, 2, 32, 3, 113, 32, 6, 32, 2, 65, 127, 115, 113, 114, 106, 65, 153,
  243, 137, 212, 5, 106, 65, 7, 119, 32, 9, 106, 34, 3, 32, 2, 113, 32, 12, 32,
  3, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 15, 119,
  32, 6, 106, 34, 2, 32, 3, 113, 32, 11, 32, 2, 65, 127, 115, 113, 114, 106, 65,
  153, 243, 137, 212, 5, 106, 65, 7, 119, 32, 12, 106, 34, 6, 32, 2, 113, 32, 3,
  65, 10, 119, 34, 8, 32, 6, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137,
  212, 5, 106, 65, 12, 119, 32, 11, 106, 34, 3, 32, 6, 113, 32, 2, 65, 10, 119,
  34, 9, 32, 3, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65,
  15, 119, 32, 8, 106, 34, 2, 65, 10, 119, 34, 11, 106, 32, 25, 32, 3, 65, 10,
  119, 34, 12, 106, 32, 1, 32, 6, 65, 10, 119, 34, 6, 106, 32, 9, 32, 24, 106,
  32, 8, 32, 18, 106, 32, 2, 32, 3, 113, 32, 6, 32, 2, 65, 127, 115, 113, 114,
  106, 65, 153, 243, 137, 212, 5, 106, 65, 9, 119, 32, 9, 106, 34, 3, 32, 2,
  113, 32, 12, 32, 3, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5,
  106, 65, 11, 119, 32, 6, 106, 34, 2, 32, 3, 113, 32, 11, 32, 2, 65, 127, 115,
  113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 7, 119, 32, 12, 106, 34, 6,
  32, 2, 113, 32, 3, 65, 10, 119, 34, 3, 32, 6, 65, 127, 115, 113, 114, 106, 65,
  153, 243, 137, 212, 5, 106, 65, 13, 119, 32, 11, 106, 34, 8, 32, 6, 113, 32,
  2, 65, 10, 119, 34, 2, 32, 8, 65, 127, 115, 34, 12, 113, 114, 106, 65, 153,
  243, 137, 212, 5, 106, 65, 12, 119, 32, 3, 106, 34, 9, 65, 10, 119, 34, 11,
  106, 32, 21, 32, 8, 65, 10, 119, 34, 8, 106, 32, 1, 32, 6, 65, 10, 119, 34, 6,
  106, 32, 2, 32, 15, 106, 32, 3, 32, 28, 106, 32, 9, 32, 12, 114, 32, 6, 115,
  106, 65, 161, 215, 231, 246, 6, 106, 65, 11, 119, 32, 2, 106, 34, 3, 32, 9,
  65, 127, 115, 114, 32, 8, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 13,
  119, 32, 6, 106, 34, 2, 32, 3, 65, 127, 115, 114, 32, 11, 115, 106, 65, 161,
  215, 231, 246, 6, 106, 65, 6, 119, 32, 8, 106, 34, 6, 32, 2, 65, 127, 115,
  114, 32, 3, 65, 10, 119, 34, 3, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65,
  7, 119, 32, 11, 106, 34, 8, 32, 6, 65, 127, 115, 114, 32, 2, 65, 10, 119, 34,
  2, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 14, 119, 32, 3, 106, 34, 9,
  65, 10, 119, 34, 11, 106, 32, 24, 32, 8, 65, 10, 119, 34, 12, 106, 32, 19, 32,
  6, 65, 10, 119, 34, 6, 106, 32, 2, 32, 10, 106, 32, 3, 32, 17, 106, 32, 9, 32,
  8, 65, 127, 115, 114, 32, 6, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 9,
  119, 32, 2, 106, 34, 3, 32, 9, 65, 127, 115, 114, 32, 12, 115, 106, 65, 161,
  215, 231, 246, 6, 106, 65, 13, 119, 32, 6, 106, 34, 2, 32, 3, 65, 127, 115,
  114, 32, 11, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 15, 119, 32, 12,
  106, 34, 6, 32, 2, 65, 127, 115, 114, 32, 3, 65, 10, 119, 34, 3, 115, 106, 65,
  161, 215, 231, 246, 6, 106, 65, 14, 119, 32, 11, 106, 34, 8, 32, 6, 65, 127,
  115, 114, 32, 2, 65, 10, 119, 34, 2, 115, 106, 65, 161, 215, 231, 246, 6, 106,
  65, 8, 119, 32, 3, 106, 34, 9, 65, 10, 119, 34, 11, 106, 32, 25, 32, 8, 65,
  10, 119, 34, 12, 106, 32, 26, 32, 6, 65, 10, 119, 34, 6, 106, 32, 2, 32, 22,
  106, 32, 3, 32, 23, 106, 32, 9, 32, 8, 65, 127, 115, 114, 32, 6, 115, 106, 65,
  161, 215, 231, 246, 6, 106, 65, 13, 119, 32, 2, 106, 34, 3, 32, 9, 65, 127,
  115, 114, 32, 12, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 6, 119, 32, 6,
  106, 34, 2, 32, 3, 65, 127, 115, 114, 32, 11, 115, 106, 65, 161, 215, 231,
  246, 6, 106, 65, 5, 119, 32, 12, 106, 34, 6, 32, 2, 65, 127, 115, 114, 32, 3,
  65, 10, 119, 34, 8, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 12, 119, 32,
  11, 106, 34, 9, 32, 6, 65, 127, 115, 114, 32, 2, 65, 10, 119, 34, 11, 115,
  106, 65, 161, 215, 231, 246, 6, 106, 65, 7, 119, 32, 8, 106, 34, 12, 65, 10,
  119, 34, 3, 106, 32, 3, 32, 25, 32, 9, 65, 10, 119, 34, 2, 106, 32, 2, 32, 27,
  32, 6, 65, 10, 119, 34, 6, 106, 32, 6, 32, 11, 32, 19, 106, 32, 8, 32, 16,
  106, 32, 12, 32, 9, 65, 127, 115, 114, 32, 6, 115, 106, 65, 161, 215, 231,
  246, 6, 106, 65, 5, 119, 32, 11, 106, 34, 6, 32, 2, 113, 32, 12, 32, 2, 65,
  127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 11, 119, 106,
  34, 2, 32, 3, 113, 32, 6, 32, 3, 65, 127, 115, 113, 114, 106, 65, 220, 249,
  238, 248, 120, 106, 65, 12, 119, 106, 34, 9, 32, 6, 65, 10, 119, 34, 3, 113,
  32, 2, 32, 3, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106,
  65, 14, 119, 106, 34, 11, 32, 2, 65, 10, 119, 34, 2, 113, 32, 9, 32, 2, 65,
  127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 15, 119, 32, 3,
  106, 34, 12, 65, 10, 119, 34, 6, 106, 32, 21, 32, 11, 65, 10, 119, 34, 8, 106,
  32, 16, 32, 9, 65, 10, 119, 34, 9, 106, 32, 2, 32, 10, 106, 32, 3, 32, 23,
  106, 32, 9, 32, 12, 113, 32, 11, 32, 9, 65, 127, 115, 113, 114, 106, 65, 220,
  249, 238, 248, 120, 106, 65, 14, 119, 32, 2, 106, 34, 3, 32, 8, 113, 32, 12,
  32, 8, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 15,
  119, 32, 9, 106, 34, 2, 32, 6, 113, 32, 3, 32, 6, 65, 127, 115, 113, 114, 106,
  65, 220, 249, 238, 248, 120, 106, 65, 9, 119, 32, 8, 106, 34, 9, 32, 3, 65,
  10, 119, 34, 3, 113, 32, 2, 32, 3, 65, 127, 115, 113, 114, 106, 65, 220, 249,
  238, 248, 120, 106, 65, 8, 119, 32, 6, 106, 34, 11, 32, 2, 65, 10, 119, 34, 2,
  113, 32, 9, 32, 2, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120,
  106, 65, 9, 119, 32, 3, 106, 34, 12, 65, 10, 119, 34, 6, 106, 32, 1, 32, 11,
  65, 10, 119, 34, 8, 106, 32, 17, 32, 9, 65, 10, 119, 34, 9, 106, 32, 2, 32,
  20, 106, 32, 3, 32, 28, 106, 32, 9, 32, 12, 113, 32, 11, 32, 9, 65, 127, 115,
  113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 14, 119, 32, 2, 106, 34,
  3, 32, 8, 113, 32, 12, 32, 8, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238,
  248, 120, 106, 65, 5, 119, 32, 9, 106, 34, 2, 32, 6, 113, 32, 3, 32, 6, 65,
  127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 6, 119, 32, 8,
  106, 34, 8, 32, 3, 65, 10, 119, 34, 3, 113, 32, 2, 32, 3, 65, 127, 115, 113,
  114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 8, 119, 32, 6, 106, 34, 9, 32,
  2, 65, 10, 119, 34, 2, 113, 32, 8, 32, 2, 65, 127, 115, 113, 114, 106, 65,
  220, 249, 238, 248, 120, 106, 65, 6, 119, 32, 3, 106, 34, 11, 65, 10, 119, 34,
  12, 106, 32, 23, 32, 9, 65, 10, 119, 34, 6, 106, 32, 21, 32, 8, 65, 10, 119,
  34, 8, 106, 32, 2, 32, 24, 106, 32, 3, 32, 22, 106, 32, 8, 32, 11, 113, 32, 9,
  32, 8, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 5,
  119, 32, 2, 106, 34, 3, 32, 6, 113, 32, 11, 32, 6, 65, 127, 115, 113, 114,
  106, 65, 220, 249, 238, 248, 120, 106, 65, 12, 119, 32, 8, 106, 34, 2, 32, 3,
  32, 12, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 9,
  119, 32, 6, 106, 34, 6, 32, 2, 32, 3, 65, 10, 119, 34, 3, 65, 127, 115, 114,
  115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 15, 119, 32, 12, 106, 34, 8,
  32, 6, 32, 2, 65, 10, 119, 34, 2, 65, 127, 115, 114, 115, 106, 65, 206, 250,
  207, 202, 122, 106, 65, 5, 119, 32, 3, 106, 34, 9, 65, 10, 119, 34, 11, 106,
  32, 24, 32, 8, 65, 10, 119, 34, 12, 106, 32, 16, 32, 6, 65, 10, 119, 34, 6,
  106, 32, 2, 32, 20, 106, 32, 3, 32, 27, 106, 32, 9, 32, 8, 32, 6, 65, 127,
  115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 11, 119, 32, 2, 106,
  34, 3, 32, 9, 32, 12, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202,
  122, 106, 65, 6, 119, 32, 6, 106, 34, 2, 32, 3, 32, 11, 65, 127, 115, 114,
  115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 8, 119, 32, 12, 106, 34, 6,
  32, 2, 32, 3, 65, 10, 119, 34, 3, 65, 127, 115, 114, 115, 106, 65, 206, 250,
  207, 202, 122, 106, 65, 13, 119, 32, 11, 106, 34, 8, 32, 6, 32, 2, 65, 10,
  119, 34, 2, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65,
  12, 119, 32, 3, 106, 34, 9, 65, 10, 119, 34, 11, 106, 32, 10, 32, 8, 65, 10,
  119, 34, 12, 106, 32, 28, 32, 6, 65, 10, 119, 34, 6, 106, 32, 2, 32, 19, 106,
  32, 1, 32, 3, 106, 32, 9, 32, 8, 32, 6, 65, 127, 115, 114, 115, 106, 65, 206,
  250, 207, 202, 122, 106, 65, 5, 119, 32, 2, 106, 34, 3, 32, 9, 32, 12, 65,
  127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 12, 119, 32, 6,
  106, 34, 2, 32, 3, 32, 11, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207,
  202, 122, 106, 65, 13, 119, 32, 12, 106, 34, 6, 32, 2, 32, 3, 65, 10, 119, 34,
  8, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 14, 119,
  32, 11, 106, 34, 9, 32, 6, 32, 2, 65, 10, 119, 34, 11, 65, 127, 115, 114, 115,
  106, 65, 206, 250, 207, 202, 122, 106, 65, 11, 119, 32, 8, 106, 34, 12, 65,
  10, 119, 34, 33, 32, 4, 106, 32, 1, 32, 10, 32, 27, 32, 23, 32, 21, 32, 23,
  32, 25, 32, 28, 32, 19, 32, 17, 32, 23, 32, 16, 32, 17, 32, 24, 32, 32, 32,
  31, 32, 4, 65, 127, 115, 114, 32, 29, 115, 106, 32, 18, 106, 65, 230, 151,
  138, 133, 5, 106, 65, 8, 119, 32, 30, 106, 34, 3, 65, 10, 119, 34, 2, 106, 32,
  7, 32, 27, 106, 32, 5, 32, 23, 106, 32, 4, 32, 20, 106, 32, 30, 32, 3, 32, 29,
  32, 5, 65, 127, 115, 114, 115, 106, 32, 1, 106, 65, 230, 151, 138, 133, 5,
  106, 65, 9, 119, 32, 4, 106, 34, 4, 32, 3, 32, 7, 65, 127, 115, 114, 115, 106,
  65, 230, 151, 138, 133, 5, 106, 65, 9, 119, 32, 5, 106, 34, 5, 32, 4, 32, 2,
  65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 11, 119, 32,
  7, 106, 34, 7, 32, 5, 32, 4, 65, 10, 119, 34, 4, 65, 127, 115, 114, 115, 106,
  65, 230, 151, 138, 133, 5, 106, 65, 13, 119, 32, 2, 106, 34, 3, 32, 7, 32, 5,
  65, 10, 119, 34, 5, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5,
  106, 65, 15, 119, 32, 4, 106, 34, 2, 65, 10, 119, 34, 13, 106, 32, 22, 32, 3,
  65, 10, 119, 34, 14, 106, 32, 26, 32, 7, 65, 10, 119, 34, 7, 106, 32, 5, 32,
  21, 106, 32, 4, 32, 25, 106, 32, 2, 32, 3, 32, 7, 65, 127, 115, 114, 115, 106,
  65, 230, 151, 138, 133, 5, 106, 65, 15, 119, 32, 5, 106, 34, 4, 32, 2, 32, 14,
  65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 5, 119, 32,
  7, 106, 34, 5, 32, 4, 32, 13, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138,
  133, 5, 106, 65, 7, 119, 32, 14, 106, 34, 7, 32, 5, 32, 4, 65, 10, 119, 34, 4,
  65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 7, 119, 32,
  13, 106, 34, 3, 32, 7, 32, 5, 65, 10, 119, 34, 5, 65, 127, 115, 114, 115, 106,
  65, 230, 151, 138, 133, 5, 106, 65, 8, 119, 32, 4, 106, 34, 2, 65, 10, 119,
  34, 13, 106, 32, 28, 32, 3, 65, 10, 119, 34, 14, 106, 32, 15, 32, 7, 65, 10,
  119, 34, 7, 106, 32, 5, 32, 19, 106, 32, 4, 32, 10, 106, 32, 2, 32, 3, 32, 7,
  65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 11, 119, 32,
  5, 106, 34, 4, 32, 2, 32, 14, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138,
  133, 5, 106, 65, 14, 119, 32, 7, 106, 34, 5, 32, 4, 32, 13, 65, 127, 115, 114,
  115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 14, 119, 32, 14, 106, 34, 7, 32,
  5, 32, 4, 65, 10, 119, 34, 3, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138,
  133, 5, 106, 65, 12, 119, 32, 13, 106, 34, 2, 32, 7, 32, 5, 65, 10, 119, 34,
  13, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 6, 119,
  32, 3, 106, 34, 14, 65, 10, 119, 34, 4, 106, 32, 4, 32, 20, 32, 2, 65, 10,
  119, 34, 5, 106, 32, 5, 32, 28, 32, 7, 65, 10, 119, 34, 7, 106, 32, 7, 32, 13,
  32, 25, 106, 32, 3, 32, 22, 106, 32, 7, 32, 14, 113, 32, 2, 32, 7, 65, 127,
  115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 9, 119, 32, 13, 106,
  34, 7, 32, 5, 113, 32, 14, 32, 5, 65, 127, 115, 113, 114, 106, 65, 164, 162,
  183, 226, 5, 106, 65, 13, 119, 106, 34, 5, 32, 4, 113, 32, 7, 32, 4, 65, 127,
  115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 15, 119, 106, 34, 2,
  32, 7, 65, 10, 119, 34, 4, 113, 32, 5, 32, 4, 65, 127, 115, 113, 114, 106, 65,
  164, 162, 183, 226, 5, 106, 65, 7, 119, 106, 34, 13, 32, 5, 65, 10, 119, 34,
  5, 113, 32, 2, 32, 5, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5,
  106, 65, 12, 119, 32, 4, 106, 34, 14, 65, 10, 119, 34, 7, 106, 32, 1, 32, 13,
  65, 10, 119, 34, 3, 106, 32, 15, 32, 2, 65, 10, 119, 34, 2, 106, 32, 5, 32,
  18, 106, 32, 4, 32, 26, 106, 32, 2, 32, 14, 113, 32, 13, 32, 2, 65, 127, 115,
  113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 8, 119, 32, 5, 106, 34, 4,
  32, 3, 113, 32, 14, 32, 3, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183,
  226, 5, 106, 65, 9, 119, 32, 2, 106, 34, 5, 32, 7, 113, 32, 4, 32, 7, 65, 127,
  115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 11, 119, 32, 3, 106,
  34, 2, 32, 4, 65, 10, 119, 34, 4, 113, 32, 5, 32, 4, 65, 127, 115, 113, 114,
  106, 65, 164, 162, 183, 226, 5, 106, 65, 7, 119, 32, 7, 106, 34, 13, 32, 5,
  65, 10, 119, 34, 5, 113, 32, 2, 32, 5, 65, 127, 115, 113, 114, 106, 65, 164,
  162, 183, 226, 5, 106, 65, 7, 119, 32, 4, 106, 34, 14, 65, 10, 119, 34, 7,
  106, 32, 7, 32, 27, 32, 13, 65, 10, 119, 34, 3, 106, 32, 21, 32, 2, 65, 10,
  119, 34, 2, 106, 32, 5, 32, 16, 106, 32, 4, 32, 10, 106, 32, 2, 32, 14, 113,
  32, 13, 32, 2, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106,
  65, 12, 119, 32, 5, 106, 34, 4, 32, 3, 113, 32, 14, 32, 3, 65, 127, 115, 113,
  114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 7, 119, 32, 2, 106, 34, 5, 32,
  7, 113, 32, 4, 32, 7, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5,
  106, 65, 6, 119, 32, 3, 106, 34, 7, 32, 4, 65, 10, 119, 34, 4, 113, 32, 5, 32,
  4, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 15, 119,
  106, 34, 3, 32, 5, 65, 10, 119, 34, 5, 113, 32, 7, 32, 5, 65, 127, 115, 113,
  114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 13, 119, 32, 4, 106, 34, 2, 65,
  10, 119, 34, 13, 106, 32, 19, 32, 3, 65, 10, 119, 34, 14, 106, 32, 18, 32, 7,
  65, 10, 119, 34, 7, 106, 32, 5, 32, 17, 106, 32, 4, 32, 24, 106, 32, 2, 32, 7,
  113, 32, 3, 32, 7, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5,
  106, 65, 11, 119, 32, 5, 106, 34, 4, 32, 2, 65, 127, 115, 114, 32, 14, 115,
  106, 65, 243, 253, 192, 235, 6, 106, 65, 9, 119, 32, 7, 106, 34, 5, 32, 4, 65,
  127, 115, 114, 32, 13, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 7, 119,
  32, 14, 106, 34, 7, 32, 5, 65, 127, 115, 114, 32, 4, 65, 10, 119, 34, 4, 115,
  106, 65, 243, 253, 192, 235, 6, 106, 65, 15, 119, 32, 13, 106, 34, 3, 32, 7,
  65, 127, 115, 114, 32, 5, 65, 10, 119, 34, 5, 115, 106, 65, 243, 253, 192,
  235, 6, 106, 65, 11, 119, 32, 4, 106, 34, 2, 65, 10, 119, 34, 13, 106, 32, 27,
  32, 3, 65, 10, 119, 34, 14, 106, 32, 22, 32, 7, 65, 10, 119, 34, 7, 106, 32,
  1, 32, 5, 106, 32, 4, 32, 20, 106, 32, 2, 32, 3, 65, 127, 115, 114, 32, 7,
  115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 8, 119, 32, 5, 106, 34, 4, 32,
  2, 65, 127, 115, 114, 32, 14, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 6,
  119, 32, 7, 106, 34, 5, 32, 4, 65, 127, 115, 114, 32, 13, 115, 106, 65, 243,
  253, 192, 235, 6, 106, 65, 6, 119, 32, 14, 106, 34, 7, 32, 5, 65, 127, 115,
  114, 32, 4, 65, 10, 119, 34, 4, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65,
  14, 119, 32, 13, 106, 34, 3, 32, 7, 65, 127, 115, 114, 32, 5, 65, 10, 119, 34,
  5, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 12, 119, 32, 4, 106, 34, 2,
  65, 10, 119, 34, 13, 106, 32, 15, 32, 3, 65, 10, 119, 34, 14, 106, 32, 24, 32,
  7, 65, 10, 119, 34, 7, 106, 32, 5, 32, 16, 106, 32, 4, 32, 10, 106, 32, 2, 32,
  3, 65, 127, 115, 114, 32, 7, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 13,
  119, 32, 5, 106, 34, 4, 32, 2, 65, 127, 115, 114, 32, 14, 115, 106, 65, 243,
  253, 192, 235, 6, 106, 65, 5, 119, 32, 7, 106, 34, 5, 32, 4, 65, 127, 115,
  114, 32, 13, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 14, 119, 32, 14,
  106, 34, 7, 32, 5, 65, 127, 115, 114, 32, 4, 65, 10, 119, 34, 4, 115, 106, 65,
  243, 253, 192, 235, 6, 106, 65, 13, 119, 32, 13, 106, 34, 3, 32, 7, 65, 127,
  115, 114, 32, 5, 65, 10, 119, 34, 5, 115, 106, 65, 243, 253, 192, 235, 6, 106,
  65, 13, 119, 32, 4, 106, 34, 2, 65, 10, 119, 34, 13, 106, 32, 22, 32, 3, 65,
  10, 119, 34, 14, 106, 32, 10, 32, 7, 65, 10, 119, 34, 7, 106, 32, 5, 32, 26,
  106, 32, 4, 32, 21, 106, 32, 2, 32, 3, 65, 127, 115, 114, 32, 7, 115, 106, 65,
  243, 253, 192, 235, 6, 106, 65, 7, 119, 32, 5, 106, 34, 5, 32, 2, 65, 127,
  115, 114, 32, 14, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 5, 119, 32, 7,
  106, 34, 10, 32, 5, 113, 32, 13, 32, 10, 65, 127, 115, 113, 114, 106, 65, 233,
  237, 181, 211, 7, 106, 65, 15, 119, 32, 14, 106, 34, 4, 32, 10, 113, 32, 5,
  65, 10, 119, 34, 7, 32, 4, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181,
  211, 7, 106, 65, 5, 119, 32, 13, 106, 34, 5, 32, 4, 113, 32, 10, 65, 10, 119,
  34, 3, 32, 5, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65,
  8, 119, 32, 7, 106, 34, 10, 65, 10, 119, 34, 2, 106, 32, 17, 32, 5, 65, 10,
  119, 34, 13, 106, 32, 25, 32, 4, 65, 10, 119, 34, 4, 106, 32, 3, 32, 28, 106,
  32, 10, 32, 7, 32, 19, 106, 32, 5, 32, 10, 113, 32, 4, 32, 10, 65, 127, 115,
  113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 11, 119, 32, 3, 106, 34,
  10, 113, 32, 13, 32, 10, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211,
  7, 106, 65, 14, 119, 32, 4, 106, 34, 4, 32, 10, 113, 32, 2, 32, 4, 65, 127,
  115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 14, 119, 32, 13, 106,
  34, 5, 32, 4, 113, 32, 10, 65, 10, 119, 34, 7, 32, 5, 65, 127, 115, 113, 114,
  106, 65, 233, 237, 181, 211, 7, 106, 65, 6, 119, 32, 2, 106, 34, 10, 32, 5,
  113, 32, 4, 65, 10, 119, 34, 3, 32, 10, 65, 127, 115, 113, 114, 106, 65, 233,
  237, 181, 211, 7, 106, 65, 14, 119, 32, 7, 106, 34, 4, 65, 10, 119, 34, 2,
  106, 32, 26, 32, 10, 65, 10, 119, 34, 13, 106, 32, 24, 32, 5, 65, 10, 119, 34,
  5, 106, 32, 3, 32, 16, 106, 32, 7, 32, 18, 106, 32, 4, 32, 10, 113, 32, 5, 32,
  4, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 6, 119,
  32, 3, 106, 34, 10, 32, 4, 113, 32, 13, 32, 10, 65, 127, 115, 113, 114, 106,
  65, 233, 237, 181, 211, 7, 106, 65, 9, 119, 32, 5, 106, 34, 4, 32, 10, 113,
  32, 2, 32, 4, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65,
  12, 119, 32, 13, 106, 34, 5, 32, 4, 113, 32, 10, 65, 10, 119, 34, 7, 32, 5,
  65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 9, 119, 32,
  2, 106, 34, 10, 32, 5, 113, 32, 4, 65, 10, 119, 34, 3, 32, 10, 65, 127, 115,
  113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 12, 119, 32, 7, 106, 34, 4,
  65, 10, 119, 34, 2, 32, 17, 106, 32, 1, 32, 5, 65, 10, 119, 34, 5, 106, 32, 3,
  32, 15, 106, 32, 7, 32, 20, 106, 32, 4, 32, 10, 113, 32, 5, 32, 4, 65, 127,
  115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 5, 119, 32, 3, 106,
  34, 1, 32, 4, 113, 32, 10, 65, 10, 119, 34, 4, 32, 1, 65, 127, 115, 113, 114,
  106, 65, 233, 237, 181, 211, 7, 106, 65, 15, 119, 32, 5, 106, 34, 10, 32, 1,
  113, 32, 2, 32, 10, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7,
  106, 65, 8, 119, 32, 4, 106, 34, 5, 32, 10, 65, 10, 119, 34, 7, 115, 32, 4,
  32, 16, 106, 32, 10, 32, 1, 65, 10, 119, 34, 1, 115, 32, 5, 115, 106, 65, 8,
  119, 32, 2, 106, 34, 10, 115, 106, 65, 5, 119, 32, 1, 106, 34, 16, 65, 10,
  119, 34, 4, 106, 32, 19, 32, 5, 65, 10, 119, 34, 19, 106, 32, 1, 32, 15, 106,
  32, 10, 32, 19, 115, 32, 16, 115, 106, 65, 12, 119, 32, 7, 106, 34, 1, 32, 4,
  115, 32, 7, 32, 21, 106, 32, 16, 32, 10, 65, 10, 119, 34, 15, 115, 32, 1, 115,
  106, 65, 9, 119, 32, 19, 106, 34, 10, 115, 106, 65, 12, 119, 32, 15, 106, 34,
  19, 32, 10, 65, 10, 119, 34, 21, 115, 32, 15, 32, 18, 106, 32, 10, 32, 1, 65,
  10, 119, 34, 1, 115, 32, 19, 115, 106, 65, 5, 119, 32, 4, 106, 34, 15, 115,
  106, 65, 14, 119, 32, 1, 106, 34, 18, 65, 10, 119, 34, 10, 106, 32, 19, 65,
  10, 119, 34, 19, 32, 24, 106, 32, 1, 32, 20, 106, 32, 15, 32, 19, 115, 32, 18,
  115, 106, 65, 6, 119, 32, 21, 106, 34, 1, 32, 10, 115, 32, 21, 32, 22, 106,
  32, 18, 32, 15, 65, 10, 119, 34, 15, 115, 32, 1, 115, 106, 65, 8, 119, 32, 19,
  106, 34, 18, 115, 106, 65, 13, 119, 32, 15, 106, 34, 20, 32, 18, 65, 10, 119,
  34, 19, 115, 32, 15, 32, 26, 106, 32, 18, 32, 1, 65, 10, 119, 34, 1, 115, 32,
  20, 115, 106, 65, 6, 119, 32, 10, 106, 34, 15, 115, 106, 65, 5, 119, 32, 1,
  106, 34, 18, 65, 10, 119, 34, 10, 106, 54, 2, 8, 32, 0, 32, 1, 32, 23, 106,
  32, 15, 32, 20, 65, 10, 119, 34, 1, 115, 32, 18, 115, 106, 65, 15, 119, 32,
  19, 106, 34, 20, 65, 10, 119, 34, 24, 32, 31, 32, 8, 32, 22, 106, 32, 12, 32,
  9, 32, 6, 65, 10, 119, 34, 22, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207,
  202, 122, 106, 65, 8, 119, 32, 11, 106, 34, 23, 65, 10, 119, 106, 106, 54, 2,
  4, 32, 0, 32, 29, 32, 11, 32, 17, 106, 32, 23, 32, 12, 32, 9, 65, 10, 119, 34,
  21, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 5, 119,
  32, 22, 106, 34, 17, 106, 32, 19, 32, 28, 106, 32, 18, 32, 15, 65, 10, 119,
  34, 15, 115, 32, 20, 115, 106, 65, 13, 119, 32, 1, 106, 34, 18, 65, 10, 119,
  106, 54, 2, 0, 32, 0, 32, 1, 32, 27, 106, 32, 10, 32, 20, 115, 32, 18, 115,
  106, 65, 11, 119, 32, 15, 106, 34, 1, 32, 21, 32, 32, 106, 32, 22, 32, 26,
  106, 32, 17, 32, 23, 32, 33, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207,
  202, 122, 106, 65, 6, 119, 106, 106, 54, 2, 16, 32, 0, 32, 21, 32, 30, 106,
  32, 10, 106, 32, 15, 32, 25, 106, 32, 18, 32, 24, 115, 32, 1, 115, 106, 65,
  11, 119, 106, 54, 2, 12, 11, 36, 1, 2, 127, 65, 160, 8, 33, 1, 2, 64, 2, 64,
  2, 64, 32, 0, 14, 2, 1, 0, 2, 11, 65, 192, 8, 33, 1, 11, 32, 1, 33, 2, 11, 32,
  2, 11, 6, 0, 32, 0, 16, 1, 11, 11, 27, 1, 0, 65, 128, 8, 11, 20, 1, 35, 69,
  103, 137, 171, 205, 239, 254, 220, 186, 152, 118, 84, 50, 16, 240, 225, 210,
  195, 0, 38, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114,
  111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 1, 5, 99, 108, 97, 110, 103, 6,
  49, 49, 46, 48, 46, 48,
];
const wasmInstance = WebAssembly.instantiate(new Uint8Array(WASM))


const P = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn;
const u8n = (len) => new Uint8Array(len);
const concatBytes = (...arrs) => {
    const r = u8n(arrs.reduce((sum, a) => sum + a.length, 0)); // create u8a of summed length
    let pad = 0; // walk through each array,
    arrs.forEach(a => { r.set(a, pad); pad += a.length; }); // ensure they have proper type
    return r;
};
const M = (a, b = P) => {
    const r = a % b;
    return r >= 0n ? r : b + r;
};

const invert = (num) => {
    let a = M(num, P), b = P, x = 0n, y = 1n, u = 1n, v = 0n;
    while (a !== 0n) {
        const q = b / a, r = b % a;
        const m = x - u * q, n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    return M(x, P);
};
const isEven = (y) => (y & 1n) === 0n;
const u8of = (n) => Uint8Array.of(n);
const getPrefix = (y) => u8of(isEven(y) ? 0x02 : 0x03);

class Point {
    X;
    Y;
    Z;
    constructor(X, Y, Z) {
        this.X = X;
        this.Y = Y;
        this.Z = Z;
    }
    add(other) {
        const { X: X1, Y: Y1, Z: Z1 } = this;
        const { X: X2, Y: Y2, Z: Z2 } = other;
        let X3 = 0n, Y3 = 0n, Z3 = 0n;
        let t0 = M(X1 * X2);
        let t1 = M(Y1 * Y2);
        let t2 = M(Z1 * Z2);
        let t3 = M(X1 + Y1);
        let t4 = M(X2 + Y2);
        let t5 = M(X2 + Z2); // step 1
        t3 = M(t3 * t4);
        t4 = M(t0 + t1);
        t3 = M(t3 - t4);
        t4 = M(X1 + Z1);
        t4 = M(t4 * t5);
        t5 = M(t0 + t2);
        t4 = M(t4 - t5);
        t5 = M(Y1 + Z1);
        X3 = M(Y2 + Z2); // step 15
        t5 = M(t5 * X3);
        X3 = M(t1 + t2);
        t5 = M(t5 - X3);
        t2 = M(21n * t2); // step 20
        X3 = M(t1 - t2);
        Z3 = M(t1 + t2);
        Y3 = M(X3 * Z3);
        t1 = M(t0 + t0); // step 25
        t1 = M(t1 + t0);
        t4 = M(21n * t4);
        t0 = M(t1 * t4);
        Y3 = M(Y3 + t0);
        t0 = M(t5 * t4); // step 35
        X3 = M(t3 * X3);
        X3 = M(X3 - t0);
        t0 = M(t3 * t1);
        Z3 = M(t5 * Z3);
        Z3 = M(Z3 + t0); // step 40
        return new Point(X3, Y3, Z3);
    }
    negate() {
        return new Point(this.X, M(-this.Y), this.Z);
    }
    print(name) {
        console.log(`=== ${name}\nx:`, '0x'+this.X.toString(16), '\ny:', '0x'+this.Y.toString(16), '\nz:', '0x'+this.Z.toString(16));
    }
}
const fromHexString = (hexString) => Uint8Array.from(hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)));
const G = new Point(0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798n, 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8n, 1n);
const I = new Point(0n, 1n, 0n);
const getPublicKey = (privKey, isCompressed=true) => {
    // let p = I;
    // for (let d = G; privKey > 0n; privKey >>= 1n) {
    //     const isBit = privKey & 1n
    //     if (isBit) p = p.add(d);
    //     d = d.add(d);
    // }
    const { X: x, Y: y, Z: z } = wNAF(privKey);
    // p.print('RESULT');
    const iz = invert(z);
    const x32b = fromHexString(M(x * iz).toString(16).padStart(64, '0'));
    // console.log('x32b:', bToHex(x32b))
    if (isCompressed)        
        return concatBytes(getPrefix(M(y * iz)), x32b);
    const y32b = fromHexString(M(y * iz).toString(16).padStart(64, '0'))
    return concatBytes(u8of(0x04), x32b, y32b);
};

const W = 8; // W is window size
const scalarBits = 256;
const pwindows = Math.ceil(scalarBits / W) + 1; // 33 for W=8, NOT 32 - see wNAF loop
const pwindowSize = 2 ** (W - 1); // 128 for W=8
const precompute = () => {
    const points = [];
    let p = G;
    let b = p;
    for (let w = 0; w < pwindows; w++) {
        b = p;
        points.push(b);
        for (let i = 1; i < pwindowSize; i++) {
            b = b.add(p);
            points.push(b);
        } // i=1, bc we skip 0
        p = b.add(b);
    }
    return points;
};
let Gpows = precompute(); // precomputes for base point G

const wNAF = (n) => {
    const comp = Gpows;
    let p = I;
    const mask = BigInt(2 ** W - 1); // 255 for W=8 == mask 0b11111111
    const shiftBy = BigInt(W); // 8 for W=8
    const ONE = 1n;
    const WIN_SIZE = pwindowSize;
    for (let w = 0; w < pwindows; w++) {
        let wbits = Number(n & mask); // extract W bits.
        n >>= shiftBy; // shift number by W bits.
        if (wbits > WIN_SIZE) {
            wbits -= 256;
            n += ONE;
        }
        const off = w * WIN_SIZE;
        if (wbits !== 0) {
            const offP = off + Math.abs(wbits) - 1;
            p = p.add(wbits < 0 ? comp[offP].negate() : comp[offP]); // bits are 1: add to result point
        }
    }
    return p; // return both real and fake points for JIT
};