const BIP39 = array<u32, 4816>(
0x00002004,0x0000200b,0x00002012,0x00002016,0x0000201b,0x00002020,0x00002026,0x0000202c,0x00002034,0x0000203a,0x0000203f,0x00002045,0x0000204d,0x00002054,0x0000205a,0x00002061,0x00002065,0x0000206d,0x00002074,0x0000207a,
0x0000207d,0x00002083,0x00002088,0x0000208f,0x00002095,0x0000209a,0x0000209d,0x000020a3,0x000020aa,0x000020b0,0x000020b5,0x000020ba,0x000020c1,0x000020c7,0x000020ce,0x000020d4,0x000020da,0x000020e0,0x000020e5,0x000020e8,
0x000020ed,0x000020f2,0x000020f7,0x000020fa,0x000020fd,0x00002104,0x00002109,0x0000210e,0x00002113,0x0000211a,0x0000211f,0x00002124,0x00002127,0x0000212c,0x00002131,0x00002137,0x0000213c,0x00002141,0x00002148,0x0000214c,
0x00002151,0x00002157,0x0000215e,0x00002165,0x0000216a,0x00002170,0x00002176,0x0000217d,0x00002183,0x0000218a,0x0000218f,0x00002194,0x00002199,0x0000219f,0x000021a4,0x000021ac,0x000021b2,0x000021b9,0x000021bf,0x000021c6,
0x000021cd,0x000021d4,0x000021d7,0x000021dc,0x000021e3,0x000021e9,0x000021ee,0x000021f5,0x000021fa,0x000021fe,0x00002204,0x00002208,0x0000220d,0x00002212,0x00002215,0x0000221a,0x0000221f,0x00002223,0x00002229,0x00002230,
0x00002236,0x0000223c,0x00002241,0x00002244,0x0000224c,0x00002252,0x00002259,0x0000225c,0x00002262,0x00002269,0x0000226e,0x00002274,0x0000227a,0x00002280,0x00002287,0x0000228b,0x00002291,0x00002297,0x0000229f,0x000022a6,
0x000022ad,0x000022b2,0x000022b8,0x000022bc,0x000022c2,0x000022c6,0x000022cc,0x000022d3,0x000022da,0x000022df,0x000022e4,0x000022e9,0x000022ed,0x000022f4,0x000022f9,0x00002300,0x00002304,0x00002308,0x00002310,0x00002315,
0x0000231a,0x0000231d,0x00002324,0x0000232b,0x0000232f,0x00002335,0x0000233b,0x00002341,0x00002344,0x0000234a,0x00002351,0x00002357,0x0000235b,0x00002360,0x00002366,0x0000236c,0x00002371,0x00002375,0x0000237b,0x00002382,
0x00002388,0x0000238c,0x00002392,0x00002397,0x0000239d,0x000023a3,0x000023aa,0x000023af,0x000023b3,0x000023b8,0x000023bf,0x000023c3,0x000023c9,0x000023cf,0x000023d6,0x000023dc,0x000023e3,0x000023e6,0x000023ea,0x000023ee,
0x000023f5,0x000023f9,0x000023fe,0x00002404,0x00002409,0x0000240e,0x00002413,0x0000241a,0x0000241f,0x00002424,0x00002429,0x0000242e,0x00002433,0x0000243a,0x00002440,0x00002444,0x00002448,0x0000244d,0x00002452,0x00002456,
0x0000245a,0x0000245e,0x00002462,0x00002466,0x0000246b,0x0000246f,0x00002474,0x0000247a,0x00002480,0x00002486,0x0000248a,0x00002490,0x00002496,0x00002499,0x0000249c,0x000024a3,0x000024a8,0x000024ad,0x000024b2,0x000024b7,
0x000024bc,0x000024c2,0x000024c7,0x000024cd,0x000024d2,0x000024d8,0x000024dd,0x000024e2,0x000024ea,0x000024f0,0x000024f6,0x000024fb,0x00002502,0x00002507,0x0000250c,0x00002512,0x00002517,0x0000251d,0x00002524,0x00002529,
0x0000252d,0x00002531,0x00002537,0x0000253d,0x00002543,0x00002549,0x0000254f,0x00002554,0x00002557,0x0000255f,0x00002563,0x00002569,0x0000256e,0x00002572,0x00002579,0x0000257e,0x00002583,0x00002589,0x0000258d,0x00002591,
0x00002595,0x00002599,0x0000259f,0x000025a3,0x000025a6,0x000025ab,0x000025b1,0x000025b6,0x000025bc,0x000025c1,0x000025c7,0x000025cd,0x000025d4,0x000025db,0x000025e2,0x000025e5,0x000025eb,0x000025ef,0x000025f4,0x000025fa,
0x000025ff,0x00002603,0x00002607,0x0000260b,0x00002611,0x00002617,0x0000261d,0x00002620,0x00002627,0x0000262c,0x00002634,0x0000263a,0x00002640,0x00002645,0x0000264c,0x00002650,0x00002657,0x0000265d,0x00002663,0x00002669,
0x00002670,0x00002676,0x0000267d,0x00002682,0x00002687,0x0000268f,0x00002695,0x0000269a,0x000026a1,0x000026a7,0x000026ac,0x000026b0,0x000026b5,0x000026ba,0x000026c0,0x000026c4,0x000026ca,0x000026cf,0x000026d6,0x000026db,
0x000026e0,0x000026e7,0x000026ed,0x000026f3,0x000026fa,0x00002701,0x00002706,0x0000270b,0x00002710,0x00002718,0x0000271e,0x00002725,0x00002729,0x0000272e,0x00002733,0x00002737,0x0000273e,0x00002742,0x00002746,0x0000274b,
0x00002750,0x00002756,0x0000275b,0x00002761,0x00002766,0x0000276b,0x00002771,0x00002775,0x0000277a,0x0000277e,0x00002783,0x00002788,0x0000278d,0x00002792,0x00002796,0x0000279b,0x000027a2,0x000027a8,0x000027ad,0x000027b2,
0x000027b9,0x000027bd,0x000027c3,0x000027c7,0x000027cb,0x000027d2,0x000027d7,0x000027dd,0x000027e4,0x000027e8,0x000027ef,0x000027f4,0x000027fa,0x00002801,0x00002808,0x0000280f,0x00002816,0x0000281e,0x00002825,0x0000282d,
0x00002834,0x0000283c,0x00002840,0x00002844,0x0000284a,0x0000284e,0x00002853,0x00002857,0x0000285b,0x00002862,0x00002866,0x0000286c,0x00002871,0x00002878,0x0000287e,0x00002884,0x0000288a,0x0000288f,0x00002895,0x0000289a,
0x000028a0,0x000028a5,0x000028a9,0x000028ae,0x000028b3,0x000028b9,0x000028be,0x000028c3,0x000028c8,0x000028ce,0x000028d3,0x000028d7,0x000028de,0x000028e3,0x000028e8,0x000028ee,0x000028f2,0x000028f7,0x000028fd,0x00002902,
0x00002909,0x0000290e,0x00002914,0x0000291b,0x00002921,0x00002926,0x00002929,0x00002930,0x00002934,0x0000293b,0x0000293e,0x00002946,0x0000294d,0x00002954,0x0000295b,0x00002960,0x00002967,0x0000296d,0x00002971,0x00002976,
0x00002979,0x0000297f,0x00002983,0x00002988,0x0000298e,0x00002994,0x00002998,0x000029a0,0x000029a4,0x000029a7,0x000029ab,0x000029b1,0x000029b7,0x000029bd,0x000029c5,0x000029cb,0x000029d2,0x000029da,0x000029e2,0x000029e6,
0x000029ed,0x000029f3,0x000029f7,0x000029fd,0x00002a02,0x00002a09,0x00002a0f,0x00002a15,0x00002a1b,0x00002a22,0x00002a26,0x00002a2c,0x00002a32,0x00002a39,0x00002a3e,0x00002a44,0x00002a4a,0x00002a52,0x00002a58,0x00002a5e,
0x00002a62,0x00002a69,0x00002a70,0x00002a76,0x00002a7c,0x00002a83,0x00002a89,0x00002a8f,0x00002a96,0x00002a9a,0x00002aa1,0x00002aa6,0x00002aaa,0x00002ab0,0x00002ab4,0x00002aba,0x00002ac1,0x00002ac8,0x00002acf,0x00002ad5,
0x00002add,0x00002ae3,0x00002ae7,0x00002aef,0x00002af7,0x00002afe,0x00002b02,0x00002b09,0x00002b11,0x00002b18,0x00002b20,0x00002b26,0x00002b2c,0x00002b33,0x00002b38,0x00002b3e,0x00002b46,0x00002b49,0x00002b4d,0x00002b54,
0x00002b5a,0x00002b60,0x00002b66,0x00002b6b,0x00002b6f,0x00002b73,0x00002b79,0x00002b7d,0x00002b82,0x00002b88,0x00002b8d,0x00002b94,0x00002b98,0x00002b9d,0x00002ba2,0x00002ba7,0x00002bac,0x00002bb1,0x00002bb5,0x00002bba,
0x00002bbe,0x00002bc2,0x00002bc5,0x00002bc9,0x00002bcd,0x00002bd1,0x00002bd7,0x00002bdb,0x00002be0,0x00002be4,0x00002be9,0x00002bf0,0x00002bf5,0x00002bfa,0x00002bff,0x00002c03,0x00002c08,0x00002c0e,0x00002c12,0x00002c16,
0x00002c1a,0x00002c21,0x00002c28,0x00002c2c,0x00002c30,0x00002c37,0x00002c3d,0x00002c40,0x00002c45,0x00002c4b,0x00002c50,0x00002c55,0x00002c5d,0x00002c64,0x00002c6b,0x00002c73,0x00002c7b,0x00002c80,0x00002c84,0x00002c8a,
0x00002c90,0x00002c97,0x00002c9d,0x00002ca4,0x00002caa,0x00002cb1,0x00002cb6,0x00002cbc,0x00002cc1,0x00002cc4,0x00002ccb,0x00002cd2,0x00002cd7,0x00002cdd,0x00002ce4,0x00002cea,0x00002cf0,0x00002cf7,0x00002cfc,0x00002d02,
0x00002d08,0x00002d0e,0x00002d14,0x00002d1a,0x00002d1f,0x00002d25,0x00002d2a,0x00002d32,0x00002d39,0x00002d3e,0x00002d43,0x00002d46,0x00002d4b,0x00002d50,0x00002d57,0x00002d5c,0x00002d61,0x00002d67,0x00002d6c,0x00002d73,
0x00002d79,0x00002d80,0x00002d86,0x00002d8e,0x00002d92,0x00002d97,0x00002d9d,0x00002da2,0x00002da9,0x00002daf,0x00002db7,0x00002dbd,0x00002dc4,0x00002dca,0x00002dd1,0x00002dd9,0x00002de0,0x00002de7,0x00002dec,0x00002df1,
0x00002df5,0x00002dfb,0x00002e01,0x00002e07,0x00002e0d,0x00002e14,0x00002e1a,0x00002e21,0x00002e27,0x00002e2c,0x00002e2f,0x00002e36,0x00002e3c,0x00002e40,0x00002e47,0x00002e4b,0x00002e50,0x00002e55,0x00002e59,0x00002e5e,
0x00002e62,0x00002e68,0x00002e6e,0x00002e71,0x00002e76,0x00002e7d,0x00002e81,0x00002e88,0x00002e8b,0x00002e90,0x00002e96,0x00002e9d,0x00002ea2,0x00002eaa,0x00002eb1,0x00002eb9,0x00002ec0,0x00002ec3,0x00002ec7,0x00002ecb,
0x00002ed1,0x00002ed6,0x00002ede,0x00002ee3,0x00002ee8,0x00002eeb,0x00002ef0,0x00002ef7,0x00002efc,0x00002f02,0x00002f06,0x00002f0a,0x00002f10,0x00002f15,0x00002f19,0x00002f1d,0x00002f23,0x00002f29,0x00002f2d,0x00002f31,
0x00002f36,0x00002f3c,0x00002f40,0x00002f43,0x00002f4a,0x00002f4d,0x00002f51,0x00002f56,0x00002f5b,0x00002f5f,0x00002f65,0x00002f69,0x00002f6f,0x00002f73,0x00002f78,0x00002f7d,0x00002f82,0x00002f88,0x00002f8d,0x00002f92,
0x00002f95,0x00002f99,0x00002f9e,0x00002fa1,0x00002fa5,0x00002fa9,0x00002faf,0x00002fb3,0x00002fb7,0x00002fbc,0x00002fc2,0x00002fc8,0x00002fcc,0x00002fd3,0x00002fd8,0x00002fdf,0x00002fe5,0x00002feb,0x00002ff0,0x00002ff3,
0x00002ffa,0x00002fff,0x00003007,0x0000300c,0x00003012,0x00003018,0x0000301c,0x00003021,0x00003026,0x0000302b,0x00003031,0x00003036,0x0000303a,0x0000303d,0x00003042,0x00003049,0x0000304d,0x00003053,0x00003059,0x0000305d,
0x00003063,0x0000306a,0x0000306e,0x00003071,0x00003077,0x0000307e,0x00003084,0x0000308a,0x00003091,0x00003094,0x00003098,0x0000309c,0x000030a2,0x000030a7,0x000030ab,0x000030b2,0x000030b8,0x000030bd,0x000030c3,0x000030ca,
0x000030d1,0x000030d6,0x000030db,0x000030df,0x000030e5,0x000030eb,0x000030f2,0x000030f6,0x000030fa,0x000030fe,0x00003104,0x00003109,0x0000310e,0x00003113,0x0000311a,0x0000311f,0x00003124,0x00003129,0x0000312e,0x00003132,
0x00003136,0x0000313a,0x00003141,0x00003145,0x00003149,0x0000314e,0x00003155,0x0000315b,0x00003161,0x00003167,0x0000316b,0x0000316f,0x00003174,0x00003179,0x0000317e,0x00003183,0x00003188,0x0000318f,0x00003194,0x00003199,
0x0000319d,0x000031a2,0x000031a6,0x000031ad,0x000031b2,0x000031b6,0x000031bb,0x000031c0,0x000031c5,0x000031ca,0x000031cf,0x000031d5,0x000031d8,0x000031db,0x000031e0,0x000031e4,0x000031e8,0x000031ee,0x000031f5,0x000031f9,
0x000031fe,0x00003204,0x00003208,0x0000320d,0x00003214,0x00003217,0x0000321b,0x0000321f,0x00003225,0x00003229,0x0000322f,0x00003234,0x00003239,0x00003241,0x00003247,0x0000324c,0x00003252,0x00003256,0x00003259,0x0000325d,
0x00003263,0x00003267,0x0000326b,0x0000326f,0x00003272,0x00003276,0x0000327d,0x00003282,0x00003288,0x0000328c,0x00003290,0x00003297,0x0000329d,0x000032a1,0x000032a6,0x000032aa,0x000032ae,0x000032b2,0x000032b8,0x000032bd,
0x000032c5,0x000032c9,0x000032ce,0x000032d2,0x000032d7,0x000032da,0x000032de,0x000032e3,0x000032e9,0x000032ee,0x000032f5,0x000032fb,0x000032ff,0x00003305,0x0000330a,0x0000330e,0x00003315,0x0000331b,0x0000331e,0x00003322,
0x00003326,0x0000332e,0x00003332,0x00003338,0x0000333b,0x00003342,0x00003349,0x0000334e,0x00003355,0x0000335c,0x00003362,0x00003368,0x0000336e,0x00003375,0x0000337c,0x00003380,0x00003387,0x0000338d,0x00003395,0x0000339a,
0x000033a2,0x000033a8,0x000033b0,0x000033b6,0x000033bd,0x000033c3,0x000033c9,0x000033d0,0x000033d7,0x000033dd,0x000033e3,0x000033e9,0x000033ee,0x000033f6,0x000033fb,0x00003402,0x00003408,0x0000340e,0x00003414,0x0000341b,
0x00003422,0x00003428,0x00003430,0x00003434,0x0000343a,0x00003440,0x00003447,0x0000344b,0x00003451,0x00003458,0x0000345d,0x00003461,0x00003466,0x0000346c,0x00003472,0x00003475,0x00003479,0x00003480,0x00003485,0x0000348a,
0x0000348f,0x00003492,0x00003496,0x0000349a,0x000034a1,0x000034a4,0x000034a9,0x000034ae,0x000034b2,0x000034b8,0x000034be,0x000034c2,0x000034c6,0x000034ce,0x000034d2,0x000034d6,0x000034dd,0x000034e0,0x000034e4,0x000034e7,
0x000034ed,0x000034f1,0x000034f8,0x000034fc,0x000034ff,0x00003506,0x0000350a,0x00003510,0x00003514,0x00003518,0x0000351d,0x00003522,0x00003526,0x00003529,0x0000352e,0x00003533,0x00003539,0x0000353d,0x00003541,0x00003545,
0x0000354d,0x00003553,0x00003558,0x0000355d,0x00003562,0x00003567,0x0000356e,0x00003572,0x00003575,0x00003579,0x00003580,0x00003585,0x00003589,0x0000358f,0x00003593,0x00003598,0x0000359d,0x000035a4,0x000035a8,0x000035ab,
0x000035b0,0x000035b6,0x000035bd,0x000035c2,0x000035c6,0x000035cc,0x000035d0,0x000035d7,0x000035dd,0x000035e3,0x000035e8,0x000035ec,0x000035f3,0x000035fa,0x00003601,0x00003605,0x00003609,0x0000360e,0x00003612,0x00003616,
0x0000361b,0x0000361f,0x00003623,0x00003629,0x0000362d,0x00003633,0x00003637,0x0000363d,0x00003641,0x00003645,0x0000364c,0x00003651,0x00003655,0x0000365a,0x00003660,0x00003664,0x00003668,0x0000366f,0x00003673,0x00003679,
0x0000367d,0x00003682,0x00003687,0x0000368e,0x00003694,0x00003699,0x0000369e,0x000036a4,0x000036aa,0x000036b1,0x000036b4,0x000036b9,0x000036bf,0x000036c3,0x000036c7,0x000036cb,0x000036d0,0x000036d4,0x000036da,0x000036dd,
0x000036e3,0x000036ea,0x000036ef,0x000036f6,0x000036fc,0x00003701,0x00003707,0x0000370c,0x00003712,0x00003718,0x0000371e,0x00003726,0x0000372a,0x0000372e,0x00003734,0x00003739,0x00003741,0x00003745,0x0000374b,0x00003751,
0x00003758,0x0000375c,0x00003762,0x00003766,0x0000376d,0x00003771,0x00003779,0x0000377e,0x00003783,0x00003789,0x0000378d,0x00003793,0x00003799,0x000037a0,0x000037a4,0x000037a9,0x000037ae,0x000037b3,0x000037b8,0x000037bc,
0x000037c3,0x000037c8,0x000037ce,0x000037d4,0x000037dc,0x000037e0,0x000037e7,0x000037ec,0x000037f0,0x000037f7,0x000037fc,0x00003802,0x00003809,0x0000380f,0x00003815,0x00003819,0x00003820,0x00003823,0x00003828,0x0000382f,
0x00003835,0x0000383a,0x00003840,0x00003843,0x00003849,0x00003850,0x00003856,0x0000385d,0x00003862,0x00003866,0x0000386b,0x0000386f,0x00003876,0x0000387e,0x00003884,0x0000388a,0x0000388f,0x00003897,0x0000389c,0x000038a0,
0x000038a5,0x000038a9,0x000038af,0x000038b3,0x000038bb,0x000038c1,0x000038c7,0x000038cf,0x000038d4,0x000038d8,0x000038de,0x000038e4,0x000038eb,0x000038ef,0x000038f4,0x000038f8,0x000038fe,0x00003904,0x00003909,0x0000390f,
0x00003915,0x00003919,0x0000391d,0x00003921,0x00003929,0x00003930,0x00003937,0x0000393d,0x00003942,0x00003946,0x00003949,0x00003950,0x00003957,0x0000395c,0x00003960,0x00003964,0x00003968,0x0000396d,0x00003972,0x00003977,
0x0000397e,0x00003984,0x0000398a,0x0000398f,0x00003993,0x0000399a,0x0000399e,0x000039a5,0x000039ab,0x000039b0,0x000039b3,0x000039ba,0x000039c0,0x000039c5,0x000039c8,0x000039cb,0x000039cf,0x000039d5,0x000039db,0x000039e2,
0x000039e9,0x000039ef,0x000039f6,0x000039fb,0x00003a00,0x00003a07,0x00003a0b,0x00003a0e,0x00003a13,0x00003a19,0x00003a1e,0x00003a21,0x00003a25,0x00003a28,0x00003a2d,0x00003a34,0x00003a38,0x00003a3c,0x00003a3f,0x00003a44,
0x00003a4a,0x00003a4e,0x00003a52,0x00003a57,0x00003a5e,0x00003a64,0x00003a6a,0x00003a70,0x00003a75,0x00003a7c,0x00003a81,0x00003a89,0x00003a8e,0x00003a94,0x00003a9c,0x00003aa2,0x00003aa9,0x00003aae,0x00003ab5,0x00003aba,
0x00003ac0,0x00003ac7,0x00003acb,0x00003acf,0x00003ad3,0x00003ad6,0x00003adb,0x00003ae1,0x00003ae7,0x00003aec,0x00003af0,0x00003af6,0x00003afa,0x00003afe,0x00003b04,0x00003b08,0x00003b0d,0x00003b12,0x00003b17,0x00003b1e,
0x00003b23,0x00003b29,0x00003b2f,0x00003b33,0x00003b39,0x00003b3e,0x00003b42,0x00003b47,0x00003b4b,0x00003b52,0x00003b58,0x00003b5f,0x00003b64,0x00003b68,0x00003b6f,0x00003b74,0x00003b7a,0x00003b7e,0x00003b85,0x00003b8c,
0x00003b8f,0x00003b96,0x00003b9c,0x00003ba2,0x00003ba8,0x00003baf,0x00003bb5,0x00003bbb,0x00003bbe,0x00003bc3,0x00003bc8,0x00003bce,0x00003bd6,0x00003bdb,0x00003be1,0x00003be8,0x00003bed,0x00003bf0,0x00003bf6,0x00003bfa,
0x00003bff,0x00003c03,0x00003c0a,0x00003c0e,0x00003c14,0x00003c19,0x00003c1e,0x00003c23,0x00003c29,0x00003c30,0x00003c35,0x00003c39,0x00003c3f,0x00003c45,0x00003c4a,0x00003c4e,0x00003c54,0x00003c58,0x00003c5c,0x00003c61,
0x00003c66,0x00003c6a,0x00003c70,0x00003c74,0x00003c78,0x00003c7c,0x00003c83,0x00003c8a,0x00003c92,0x00003c9a,0x00003c9e,0x00003ca4,0x00003cab,0x00003cb2,0x00003cb8,0x00003cbd,0x00003cc5,0x00003ccb,0x00003cd2,0x00003cd8,
0x00003cdf,0x00003ce6,0x00003cec,0x00003cf3,0x00003cf8,0x00003cfd,0x00003d04,0x00003d09,0x00003d11,0x00003d17,0x00003d1e,0x00003d23,0x00003d2a,0x00003d31,0x00003d38,0x00003d3e,0x00003d45,0x00003d4c,0x00003d53,0x00003d58,
0x00003d60,0x00003d67,0x00003d6e,0x00003d73,0x00003d7a,0x00003d80,0x00003d87,0x00003d8b,0x00003d8f,0x00003d94,0x00003d9b,0x00003da0,0x00003da5,0x00003daa,0x00003db2,0x00003db8,0x00003dbf,0x00003dc4,0x00003dc8,0x00003dcb,
0x00003dd1,0x00003dd8,0x00003ddf,0x00003de6,0x00003ded,0x00003df5,0x00003dfa,0x00003dfe,0x00003e02,0x00003e07,0x00003e0d,0x00003e14,0x00003e18,0x00003e1c,0x00003e21,0x00003e26,0x00003e2a,0x00003e2e,0x00003e33,0x00003e38,
0x00003e3c,0x00003e41,0x00003e47,0x00003e4c,0x00003e51,0x00003e55,0x00003e59,0x00003e5f,0x00003e64,0x00003e67,0x00003e6c,0x00003e71,0x00003e75,0x00003e7b,0x00003e80,0x00003e87,0x00003e8d,0x00003e94,0x00003e9a,0x00003ea0,
0x00003ea7,0x00003ead,0x00003eb4,0x00003eba,0x00003ec0,0x00003ec6,0x00003ecc,0x00003ed3,0x00003ed9,0x00003ede,0x00003ee5,0x00003eeb,0x00003eef,0x00003ef5,0x00003efd,0x00003f03,0x00003f09,0x00003f0f,0x00003f14,0x00003f18,
0x00003f1e,0x00003f24,0x00003f2a,0x00003f31,0x00003f37,0x00003f3e,0x00003f44,0x00003f4c,0x00003f52,0x00003f5a,0x00003f62,0x00003f68,0x00003f6e,0x00003f75,0x00003f7b,0x00003f82,0x00003f88,0x00003f8e,0x00003f94,0x00003f9a,
0x00003f9d,0x00003fa3,0x00003fa7,0x00003fab,0x00003faf,0x00003fb4,0x00003fb9,0x00003fbe,0x00003fc3,0x00003fc7,0x00003fcb,0x00003fd1,0x00003fd5,0x00003fdb,0x00003fe0,0x00003fe5,0x00003fe9,0x00003fee,0x00003ff3,0x00003ff9,
0x00003fff,0x00004006,0x0000400a,0x00004010,0x00004014,0x00004018,0x0000401e,0x00004023,0x00004028,0x0000402d,0x00004032,0x00004038,0x0000403c,0x0000403f,0x00004043,0x00004046,0x0000404c,0x00004051,0x00004054,0x0000405a,
0x00004061,0x00004065,0x00004069,0x0000406e,0x00004074,0x00004079,0x0000407d,0x00004083,0x00004087,0x0000408d,0x00004091,0x00004098,0x0000409f,0x000040a4,0x000040ab,0x000040af,0x000040b2,0x000040b7,0x000040bb,0x000040c0,
0x000040c7,0x000040cc,0x000040d2,0x000040d8,0x000040df,0x000040e7,0x000040ef,0x000040f4,0x000040f9,0x000040ff,0x00004105,0x0000410a,0x0000410d,0x00004113,0x00004119,0x0000411d,0x00004123,0x00004129,0x00004130,0x00004138,
0x0000413c,0x00004140,0x00004147,0x0000414d,0x00004151,0x00004158,0x0000415e,0x00004163,0x0000416b,0x00004171,0x00004178,0x0000417f,0x00004185,0x0000418a,0x0000418f,0x00004195,0x0000419a,0x000041a1,0x000041a6,0x000041aa,
0x000041af,0x000041b6,0x000041bc,0x000041c1,0x000041c6,0x000041ca,0x000041d0,0x000041d5,0x000041d9,0x000041de,0x000041e2,0x000041e7,0x000041ef,0x000041f4,0x000041fa,0x000041ff,0x00004206,0x00004209,0x00004210,0x00004214,
0x00004218,0x0000421d,0x00004222,0x00004226,0x0000422c,0x00004230,0x00004235,0x0000423b,0x00004242,0x00004248,0x0000424d,0x00004251,0x00004256,0x0000425c,0x00004263,0x00004266,0x0000426a,0x0000426f,0x00004275,0x00004278,
0x0000427d,0x00004281,0x00004286,0x0000428b,0x0000428f,0x00004293,0x00004298,0x0000429f,0x000042a4,0x000042a9,0x000042af,0x000042b3,0x000042b9,0x000042bd,0x000042c1,0x000042c6,0x000042cb,0x000042d0,0x000042d5,0x000042da,
0x000042e0,0x000042e5,0x000042ea,0x000042ee,0x000042f3,0x000042f7,0x000042fb,0x00004301,0x00004307,0x0000430b,0x0000430f,0x00004313,0x00004318,0x0000431f,0x00004324,0x0000432c,0x00004331,0x00004338,0x0000433c,0x00004340,
0x00004345,0x00004349,0x0000434d,0x00004352,0x00004356,0x0000435c,0x00004361,0x00004366,0x0000436b,0x00004372,0x00004377,0x0000437c,0x00004383,0x00004388,0x0000438d,0x00004392,0x00004398,0x0000439d,0x000043a3,0x000043a8,
0x000043ac,0x000043b2,0x000043b7,0x000043bc,0x000043c3,0x000043c8,0x000043cd,0x000043d1,0x000043d6,0x000043dc,0x000043e2,0x000043e5,0x000043eb,0x000043f2,0x000043fa,0x00004400,0x00004407,0x0000440c,0x00004411,0x00004417,
0x0000441c,0x00004421,0x00004426,0x0000442b,0x0000442f,0x00004434,0x00004439,0x0000443d,0x00004441,0x00004447,0x0000444c,0x00004451,0x00004456,0x0000445b,0x00004462,0x00004467,0x0000446c,0x00004471,0x00004476,0x0000447e,
0x00004484,0x0000448a,0x00004490,0x00004498,0x0000449f,0x000044a4,0x000044ab,0x000044b0,0x000044b7,0x000044bd,0x000044c3,0x000044ca,0x000044ce,0x000044d4,0x000044da,0x000044df,0x000044e6,0x000044ea,0x000044f0,0x000044f3,
0x000044f8,0x000044fe,0x00004503,0x00004509,0x00004510,0x00004514,0x0000451b,0x00004520,0x00004528,0x00004530,0x00004536,0x0000453d,0x00004544,0x0000454b,0x00004550,0x00004554,0x00004559,0x0000455e,0x00004563,0x00004568,
0x0000456c,0x00004571,0x00004577,0x0000457c,0x00004582,0x00004589,0x0000458e,0x00004594,0x00004599,0x0000459f,0x000045a2,0x000045a6,0x000045ac,0x000045b0,0x000045b4,0x000045b8,0x000045be,0x000045c2,0x000045c7,0x000045cd,
0x000045d1,0x000045d6,0x000045da,0x000045de,0x000045e1,0x000045e7,0x000045ed,0x000045f1,0x000045f5,0x000045f9,0x000045fd,0x00004602,0x00004606,0x0000460b,0x0000460f,0x00004615,0x0000461a,0x0000461e,0x00004623,0x00004627,
0x0000462e,0x00004633,0x00004639,0x0000463e,0x00004643,0x0000464a,0x00004650,0x00004654,0x00004659,0x0000465d,0x00004663,0x00004667,0x0000466b,0x0000466e,0x00004673,0x00004679,0x0000467e,0x00004683,0x0000468a,0x0000468f,
0x00004696,0x00004699,0x000046a1,0x000046a7,0x000046ac,0x000046b2,0x000046ba,0x000046be,0x000046c4,0x000046cb,0x000046cf,0x000046d4,0x000046d7,0x000046dc,0x000046e2,0x000046e7,0x000046ee,0x000046f6,0x000046fa,0x000046ff,
0x00004706,0x0000470c,0x00004711,0x00004715,0x00004718,0x0000471d,0x00004722,0x00004729,0x0000472f,0x00004734,0x0000473c,0x00004740,0x00004745,0x0000474b,0x0000474f,0x00004754,0x00004758,0x0000475d,0x00004762,0x00004767,
0x0000476c,0x00004773,0x00004777,0x0000477b,0x00004781,0x00004788,0x0000478d,0x00004791,0x00004796,0x0000479d,0x000047a2,0x000047a7,0x000047aa,0x000047ae,0x000047b5,0x000047bb,0x000047bf,0x000047c5,0x000047cb,0x000047cf,
0x000047d5,0x000047db,0x000047e1,0x000047e6,0x000047ea,0x000047ef,0x000047f2,0x000047f6,0x000047fd,0x00004801,0x00004809,0x0000480f,0x00004816,0x0000481b,0x00004822,0x00004827,0x0000482b,0x00004831,0x00004837,0x0000483e,
0x00004845,0x0000484b,0x0000484f,0x00004857,0x0000485e,0x00004864,0x00004869,0x00004870,0x00004876,0x0000487c,0x00004883,0x00004889,0x0000488d,0x00004892,0x00004897,0x0000489c,0x000048a0,0x000048a5,0x000048a8,0x000048ac,
0x000048b2,0x000048b9,0x000048be,0x000048c5,0x000048cb,0x000048d1,0x000048d6,0x000048db,0x000048e1,0x000048e6,0x000048e9,0x000048ef,0x000048f4,0x000048fb,0x000048ff,0x00004904,0x0000490b,0x00004911,0x00004917,0x0000491e,
0x00004923,0x00004927,0x0000492d,0x00004934,0x00004938,0x0000493e,0x00004945,0x0000494b,0x00004952,0x00004959,0x00004960,0x00004965,0x00004969,0x00004970,0x00004977,0x0000497d,0x00004984,0x00004989,0x0000498d,0x00004992,
0x00004998,0x0000499d,0x000049a2,0x000049a7,0x000049ac,0x000049b0,0x000049b7,0x000049bd,0x000049c1,0x000049c7,0x000049cb,0x000049d0,0x000049d4,0x000049d8,0x000049dc,0x000049e2,0x000049e6,0x000049ed,0x000049f1,0x000049f8,
0x000049fc,0x00004a00,0x00004a05,0x00004a0a,0x00004a0e,0x00004a11,0x00004a17,0x00004a1d,0x00004a21,0x00004a27,0x00004a2e,0x00004a31,0x00004a38,0x00004a3f,0x00004a44,0x00004a4b,0x00004a4f,0x00004a52,0x00004a57,0x00004a5b,
0x00004a60,0x00004a65,0x00004a69,0x00004a6e,0x00004a72,0x00004a79,0x00004a7d,0x00004a82,0x00004a86,0x00004a8a,0x00004a8e,0x00004a91,0x00004a97,0x00004a9b,0x00004a9f,0x00004aa3,0x00004aa9,0x00004aaf,0x00004ab3,0x00004ab9,
0x00004abd,0x00004ac1,0x00004ac8,0x00004acc,0x00004ad1,0x00004ad7,0x00004adb,0x00004adf,0x00004ae3,0x00004ae7,0x00004aec,0x00004af1,0x00004af6,0x00004afa,0x00004aff,0x00004b06,0x00004b0b,0x00004b10,0x00004b15,0x00004b19,
0x00004b1d,0x00004b23,0x00004b26,0x00004b2b,0x00004b30,0x00004b35,0x00004b39,0x00004b3d,0x00004b40,0x6e616261,0x616e6f64,0x696c6962,0x62617974,0x6261656c,0x6174756f,0x65766f62,0x65736261,0x6261746e,0x62726f73,0x74736261,
0x74636172,0x75736261,0x62616472,0x61657375,0x73656363,0x63636173,0x6e656469,0x63636174,0x746e756f,0x75636361,0x63616573,0x76656968,0x69636165,0x6f636164,0x69747375,0x71636163,0x65726975,0x6f726361,0x63617373,0x74636174,
0x616e6f69,0x726f7463,0x72746361,0x61737365,0x61757463,0x6164616c,0x64617470,0x64646164,0x61746369,0x65726464,0x64617373,0x7473756a,0x696d6461,0x75646174,0x6461746c,0x636e6176,0x76646165,0x61656369,0x626f7265,0x66616369,
0x72696166,0x6f666661,0x66616472,0x64696172,0x69616761,0x6567616e,0x6e656761,0x72676174,0x68616565,0x61646165,0x69616d69,0x72696172,0x74726f70,0x6c736961,0x616c6165,0x6c616d72,0x616d7562,0x686f636c,0x6c616c6f,0x61747265,
0x6e65696c,0x616c6c61,0x79656c6c,0x6f6c6c61,0x6d6c6177,0x6174736f,0x656e6f6c,0x68706c61,0x726c6161,0x79646165,0x6f736c61,0x65746c61,0x776c6172,0x61737961,0x6574616d,0x6d617275,0x6e697a61,0x6f6d6167,0x6d61676e,0x746e756f,
0x73756d61,0x6e616465,0x73796c61,0x636e6174,0x61726f68,0x6569636e,0x6e61746e,0x61726567,0x656c676e,0x72676e61,0x696e6179,0x616c616d,0x656c6b6e,0x6f6e6e61,0x65636e75,0x756e6e61,0x6e616c61,0x6568746f,0x736e6172,0x61726577,
0x6e65746e,0x6e61616e,0x75716974,0x786e6165,0x79746569,0x61796e61,0x74726170,0x6c6f7061,0x6179676f,0x61657070,0x70706172,0x7061656c,0x766f7270,0x72706165,0x72616c69,0x72616863,0x63697463,0x61657261,0x6e657261,0x67726161,
0x72616575,0x6d72616d,0x72616465,0x61726f6d,0x61796d72,0x6e756f72,0x72726164,0x65676e61,0x65727261,0x72617473,0x65766972,0x6f727261,0x74726177,0x65747261,0x74636166,0x69747261,0x72617473,0x726f7774,0x6b73616b,0x65707361,
0x73617463,0x6c756173,0x73736174,0x73617465,0x74736973,0x75737361,0x7361656d,0x616d6874,0x6c687461,0x61657465,0x616d6f74,0x63617474,0x7474616b,0x61646e65,0x74697474,0x61656475,0x61727474,0x75617463,0x6f697463,0x6475616e,
0x75617469,0x74737567,0x746e7561,0x68747561,0x7561726f,0x75616f74,0x6e6d7574,0x72657661,0x61656761,0x61636f76,0x76616f64,0x6164696f,0x656b6177,0x72617761,0x61776165,0x65776179,0x656d6f73,0x75667761,0x6b77616c,0x64726177,
0x73697861,0x79626162,0x68636162,0x726f6c65,0x6f636162,0x6461626e,0x61626567,0x6c616267,0x65636e61,0x636c6162,0x62796e6f,0x626c6c61,0x6f626d61,0x6e61626f,0x62616e61,0x656e6e61,0x72616272,0x65726162,0x6162796c,0x69616772,
0x7261626e,0x626c6572,0x62657361,0x63697361,0x6b736162,0x61627465,0x656c7474,0x63616562,0x61656268,0x6165626e,0x62797475,0x75616365,0x65626573,0x656d6f63,0x66656562,0x6f666562,0x65626572,0x626e6967,0x76616865,0x68656265,
0x62646e69,0x65696c65,0x65626576,0x62776f6c,0x62746c65,0x68636e65,0x656e6562,0x62746966,0x62747365,0x61727465,0x74656279,0x62726574,0x65777465,0x65626e65,0x646e6f79,0x79636962,0x62656c63,0x69626469,0x6962656b,0x6962646e,
0x676f6c6f,0x72696279,0x72696264,0x69626874,0x72657474,0x63616c62,0x616c626b,0x6c626564,0x62656d61,0x6b6e616c,0x6c627465,0x62747361,0x6b61656c,0x73656c62,0x696c6273,0x6c62646e,0x62646f6f,0x73736f6c,0x6c626d6f,0x6573756f,
0x65756c62,0x72756c62,0x73756c62,0x616f6268,0x6f626472,0x6f627461,0x6f627964,0x6f626c69,0x6f62626d,0x6f62656e,0x6273756e,0x626b6f6f,0x74736f6f,0x64726f62,0x6f627265,0x676e6972,0x72726f62,0x6f62776f,0x6f627373,0x6d6f7474,
0x6e756f62,0x6f626563,0x796f6278,0x63617262,0x6274656b,0x6e696172,0x6e617262,0x61726264,0x72627373,0x62657661,0x64616572,0x65657262,0x7262657a,0x626b6369,0x67646972,0x69726265,0x72626665,0x74686769,0x6e697262,0x69726267,
0x72626b73,0x6f63636f,0x7262696c,0x6e656b6f,0x6e6f7262,0x7262657a,0x626d6f6f,0x68746f72,0x72627265,0x626e776f,0x68737572,0x62627562,0x7562656c,0x62796464,0x65676475,0x66756274,0x6f6c6166,0x6c697562,0x6c756264,0x6c756262,
0x6c75626b,0x6274656c,0x6c646e75,0x6e756265,0x6272656b,0x65647275,0x7275626e,0x62726567,0x74737275,0x62737562,0x6e697375,0x62737365,0x62797375,0x65747475,0x79756272,0x75627265,0x61637a7a,0x67616262,0x62616365,0x61636e69,
0x63656c62,0x75746361,0x67616373,0x6b616365,0x6c616365,0x6c61636c,0x6d61636d,0x63617265,0x63706d61,0x61636e61,0x636c616e,0x65636e61,0x6e61636c,0x61637964,0x6e6f6e6e,0x6f6e6163,0x6e616365,0x63736176,0x6f796e61,0x7061636e,
0x656c6261,0x69706163,0x636c6174,0x61747061,0x61636e69,0x72616372,0x636e6f62,0x63647261,0x6f677261,0x70726163,0x61637465,0x63797272,0x63747261,0x63657361,0x63687361,0x6e697361,0x7361636f,0x63656c74,0x61757361,0x7461636c,
0x61746163,0x63676f6c,0x68637461,0x65746163,0x79726f67,0x74746163,0x6163656c,0x74686775,0x73756163,0x75616365,0x6e6f6974,0x65766163,0x6c696563,0x63676e69,0x72656c65,0x6d656379,0x63746e65,0x75736e65,0x6e656373,0x79727574,
0x65726563,0x65636c61,0x69617472,0x6168636e,0x68637269,0x636b6c61,0x706d6168,0x636e6f69,0x676e6168,0x61686365,0x6863736f,0x65747061,0x61686372,0x63656772,0x65736168,0x74616863,0x61656863,0x65686370,0x68636b63,0x65736565,
0x66656863,0x72656863,0x68637972,0x63747365,0x6b636968,0x68636e65,0x63666569,0x646c6968,0x6d696863,0x6379656e,0x63696f68,0x6f686365,0x6365736f,0x6e6f7268,0x68636369,0x6c6b6375,0x75686365,0x68636b6e,0x636e7275,0x72616769,
0x6e6e6963,0x6e6f6d61,0x63726963,0x6963656c,0x657a6974,0x7469636e,0x76696379,0x6c636c69,0x636d6961,0x6370616c,0x6972616c,0x6c637966,0x6c637761,0x6c637961,0x636e6165,0x6b72656c,0x76656c63,0x6c637265,0x636b6369,0x6e65696c,
0x696c6374,0x6c636666,0x63626d69,0x696e696c,0x696c6363,0x6f6c6370,0x6c636b63,0x6c63676f,0x6365736f,0x68746f6c,0x756f6c63,0x6f6c6364,0x6c636e77,0x6c636275,0x63706d75,0x7473756c,0x6c637265,0x68637475,0x63616f63,0x616f6368,
0x6f637473,0x756e6f63,0x646f6374,0x666f6365,0x63656566,0x636c696f,0x636e696f,0x656c6c6f,0x6f637463,0x63726f6c,0x6d756c6f,0x6d6f636e,0x656e6962,0x656d6f63,0x666d6f63,0x6374726f,0x63696d6f,0x6d6d6f63,0x6f636e6f,0x6e61706d,
0x6e6f6379,0x74726563,0x646e6f63,0x63746375,0x69666e6f,0x6f636d72,0x6572676e,0x6f637373,0x63656e6e,0x6e6f6374,0x65646973,0x6e6f6372,0x6c6f7274,0x766e6f63,0x65636e69,0x6b6f6f63,0x6c6f6f63,0x70706f63,0x6f637265,0x6f637970,
0x636c6172,0x6365726f,0x636e726f,0x6572726f,0x6f637463,0x6f637473,0x6e6f7474,0x63756f63,0x756f6368,0x7972746e,0x70756f63,0x6f63656c,0x65737275,0x73756f63,0x6f636e69,0x63726576,0x746f796f,0x61726365,0x72636b63,0x656c6461,
0x66617263,0x61726374,0x6172636d,0x7263656e,0x63687361,0x65746172,0x61726372,0x72636c77,0x63797a61,0x6d616572,0x64657263,0x72637469,0x636b6565,0x63776572,0x6b636972,0x72637465,0x63656d69,0x70736972,0x74697263,0x72636369,
0x7263706f,0x6373736f,0x63756f72,0x6f726368,0x72636477,0x61696375,0x7572636c,0x72636c65,0x65736975,0x6d757263,0x63656c62,0x636e7572,0x75726368,0x72636873,0x79726379,0x6c617473,0x65627563,0x746c7563,0x63657275,0x75637075,
0x616f6270,0x75636472,0x756f6972,0x72756373,0x746e6572,0x74727563,0x636e6961,0x65767275,0x68737563,0x636e6f69,0x6f747375,0x7475636d,0x63796365,0x6164656c,0x6d616464,0x64656761,0x64706d61,0x65636e61,0x676e6164,0x61647265,
0x676e6972,0x68736164,0x67756164,0x72657468,0x6e776164,0x64796164,0x646c6165,0x74616265,0x62656465,0x64736972,0x64616365,0x63656465,0x65626d65,0x63656472,0x64656469,0x696c6365,0x6564656e,0x61726f63,0x65646574,0x61657263,
0x65646573,0x65647265,0x736e6566,0x66656465,0x64656e69,0x64796665,0x65726765,0x6c656465,0x65647961,0x6576696c,0x6d656472,0x64646e61,0x73696d65,0x6e656465,0x646c6169,0x69746e65,0x65647473,0x6564796e,0x74726170,0x65706564,
0x6564646e,0x69736f70,0x70656474,0x65646874,0x79747570,0x69726564,0x65646576,0x69726373,0x65646562,0x74726573,0x69736564,0x65646e67,0x65646b73,0x69617073,0x73656472,0x796f7274,0x61746564,0x65646c69,0x74636574,0x65766564,
0x64706f6c,0x63697665,0x76656465,0x6465746f,0x72676169,0x69646d61,0x69646c61,0x6e6f6d61,0x61696464,0x69647972,0x69646563,0x6c657365,0x74656964,0x66666964,0x69647265,0x61746967,0x6769646c,0x7974696e,0x656c6964,0x64616d6d,
0x656e6e69,0x6e696472,0x7561736f,0x72696472,0x64746365,0x64747269,0x67617369,0x64656572,0x6f637369,0x64726576,0x61657369,0x69646573,0x69646873,0x73696d73,0x73696473,0x6564726f,0x73696472,0x79616c70,0x74736964,0x65636e61,
0x65766964,0x69647472,0x65646976,0x6f766964,0x64656372,0x797a7a69,0x74636f64,0x6f64726f,0x656d7563,0x6f64746e,0x6c6f6467,0x6c6f646c,0x6e696870,0x616d6f64,0x6f646e69,0x6574616e,0x6b6e6f64,0x6f647965,0x64726f6e,0x64726f6f,
0x6465736f,0x6c62756f,0x766f6465,0x61726465,0x72647466,0x6e6f6761,0x6d617264,0x61726461,0x63697473,0x77617264,0x61657264,0x6572646d,0x72647373,0x64746669,0x6c6c6972,0x6e697264,0x6972646b,0x69726470,0x72646576,0x7264706f,
0x72646d75,0x63756479,0x6d75646b,0x6e756462,0x72756465,0x64676e69,0x64747375,0x68637475,0x79747564,0x72617764,0x6e796466,0x63696d61,0x65676165,0x67616572,0x6165656c,0x65796c72,0x656e7261,0x68747261,0x69736165,0x6165796c,
0x61657473,0x63657973,0x63656f68,0x676f6c6f,0x6f636579,0x796d6f6e,0x65676465,0x74696465,0x63756465,0x65657461,0x726f6666,0x67676574,0x68676965,0x74696574,0x65726568,0x776f626c,0x65646c65,0x656c6572,0x69727463,0x656c6563,
0x746e6167,0x6d656c65,0x65746e65,0x6870656c,0x65746e61,0x6176656c,0x65726f74,0x6574696c,0x65736c65,0x61626d65,0x6d656b72,0x79646f62,0x72626d65,0x65656361,0x6772656d,0x6f6d6565,0x6e6f6974,0x6c706d65,0x6d65796f,0x65776f70,
0x706d6572,0x6e657974,0x656c6261,0x63616e65,0x646e6574,0x6c646e65,0x65737365,0x726f646e,0x6e656573,0x65796d65,0x6772656e,0x666e6579,0x6563726f,0x61676e65,0x6e656567,0x656e6967,0x61686e65,0x6565636e,0x796f6a6e,0x696c6e65,
0x6e657473,0x6867756f,0x69726e65,0x6e656863,0x6c6c6f72,0x75736e65,0x6e656572,0x65726574,0x7269746e,0x746e6565,0x6e657972,0x6f6c6576,0x70656570,0x646f7369,0x75716565,0x71656c61,0x65706975,0x72656172,0x65657361,0x65646f72,
0x736f7265,0x656e6f69,0x726f7272,0x70757265,0x63736574,0x65657061,0x79617373,0x65737365,0x6565636e,0x74617473,0x65746565,0x6c616e72,0x69687465,0x76657363,0x6e656469,0x76656563,0x76656c69,0x65656b6f,0x766c6f76,0x61786565,
0x78657463,0x6c706d61,0x63786565,0x65737365,0x61686378,0x6565676e,0x74696378,0x63786565,0x6564756c,0x75637865,0x78656573,0x74756365,0x65786565,0x73696372,0x68786565,0x74737561,0x69687865,0x65746962,0x656c6978,0x73697865,
0x69786574,0x6f786574,0x65636974,0x6e617078,0x70786564,0x65746365,0x72697078,0x70786565,0x6e69616c,0x6f707865,0x78656573,0x73657270,0x74786573,0x65646e65,0x61727478,0x65657965,0x72626579,0x6166776f,0x63697262,0x65636166,
0x75636166,0x6679746c,0x66656461,0x746e6961,0x74696166,0x6c616668,0x6c61666c,0x61666573,0x6166656d,0x796c696d,0x6f6d6166,0x61667375,0x6e61666e,0x61667963,0x7361746e,0x72616679,0x7361666d,0x6e6f6968,0x66746166,0x6c617461,
0x68746166,0x61667265,0x75676974,0x75616665,0x6166746c,0x69726f76,0x65666574,0x72757461,0x62656665,0x72617572,0x64656679,0x6c617265,0x66656566,0x66646565,0x666c6565,0x6c616d65,0x6e656665,0x65666563,0x76697473,0x65666c61,
0x66686374,0x72657665,0x66776566,0x72656269,0x74636966,0x666e6f69,0x646c6569,0x75676966,0x69666572,0x6966656c,0x69666d6c,0x7265746c,0x616e6966,0x6e69666c,0x6e696664,0x6e696665,0x66726567,0x73696e69,0x72696668,0x72696665,
0x7269666d,0x69667473,0x6c616373,0x68736966,0x66746966,0x656e7469,0x69667373,0x616c6678,0x616c6667,0x6c66656d,0x66687361,0x6674616c,0x6f76616c,0x656c6672,0x696c6665,0x66746867,0x6670696c,0x74616f6c,0x636f6c66,0x6f6c666b,
0x6c66726f,0x7265776f,0x69756c66,0x756c6664,0x6c666873,0x616f6679,0x636f666d,0x6f667375,0x696f6667,0x6c6f666c,0x6c6f6664,0x66776f6c,0x66646f6f,0x66746f6f,0x6563726f,0x65726f66,0x6f667473,0x74656772,0x6b726f66,0x74726f66,
0x66656e75,0x6d75726f,0x77726f66,0x66647261,0x6973736f,0x736f666c,0x66726574,0x646e756f,0x66786f66,0x69676172,0x7266656c,0x66656d61,0x75716572,0x66746e65,0x68736572,0x65697266,0x7266646e,0x65676e69,0x676f7266,0x6e6f7266,
0x6f726674,0x72667473,0x666e776f,0x657a6f72,0x7572666e,0x75667469,0x75666c65,0x6e75666e,0x7566796e,0x63616e72,0x72756665,0x74756679,0x67657275,0x65676461,0x69616774,0x6c61676e,0x67797861,0x656c6c61,0x61677972,0x6167656d,
0x72616770,0x67656761,0x61627261,0x61676567,0x6e656472,0x6c726167,0x61676369,0x6e656d72,0x73616774,0x70736167,0x65746167,0x68746167,0x61677265,0x67656775,0x67657a61,0x72656e65,0x65676c61,0x7375696e,0x726e6567,0x6e656765,
0x67656c74,0x69756e65,0x6567656e,0x72757473,0x6f686765,0x69677473,0x67746e61,0x67746669,0x6c676769,0x6e696765,0x67726567,0x66617269,0x69676566,0x69676c72,0x6c676576,0x6c676461,0x65636e61,0x72616c67,0x616c6765,0x6c677373,
0x67656469,0x706d696c,0x6c676573,0x6765626f,0x6d6f6f6c,0x726f6c67,0x6f6c6779,0x6c676576,0x6c67776f,0x6f676575,0x6f677461,0x73656464,0x6c6f6773,0x6f6f6764,0x6f6f6764,0x6f676573,0x6c6c6972,0x736f6761,0x676c6570,0x6973736f,
0x766f6770,0x676e7265,0x676e776f,0x67626172,0x65636172,0x69617267,0x6172676e,0x7267746e,0x67657061,0x73736172,0x76617267,0x67797469,0x74616572,0x65657267,0x6972676e,0x69726764,0x72676665,0x72677469,0x7265636f,0x6f726779,
0x72677075,0x7267776f,0x67746e75,0x64726175,0x73657567,0x69756773,0x75676564,0x67746c69,0x61746975,0x6e756772,0x686d7967,0x74696261,0x72696168,0x666c6168,0x6d6d6168,0x61687265,0x6574736d,0x6e616872,0x70616864,0x61687970,
0x726f6272,0x64726168,0x73726168,0x72616868,0x74736576,0x68746168,0x68657661,0x686b7761,0x72617a61,0x61656864,0x61656864,0x6868746c,0x74726165,0x76616568,0x64656879,0x6f686567,0x69656867,0x68746867,0x6f6c6c65,0x6d6c6568,
0x65687465,0x6568706c,0x7265686e,0x6469686f,0x686e6564,0x68686769,0x686c6c69,0x68746e69,0x69687069,0x69686572,0x726f7473,0x626f6879,0x6f687962,0x79656b63,0x646c6f68,0x656c6f68,0x696c6f68,0x68796164,0x6f6c6c6f,0x6d6f6877,
0x6e6f6865,0x6f687965,0x6f68646f,0x6f686570,0x6f686e72,0x726f7272,0x73726f68,0x736f6865,0x61746970,0x736f686c,0x746f6874,0x6f686c65,0x6f687275,0x68726576,0x75686275,0x75686567,0x686e616d,0x6c626d75,0x6d756865,0x7568726f,
0x6572646e,0x6e756864,0x68797267,0x68746e75,0x6c647275,0x72756865,0x75687972,0x75687472,0x6e616273,0x62796864,0x69646972,0x63696563,0x64696e6f,0x64696165,0x69746e65,0x64697966,0x6769656c,0x65726f6e,0x696c6c69,0x67656c6c,
0x6c696c61,0x73656e6c,0x616d6973,0x6d696567,0x74617469,0x6d6d6965,0x65736e65,0x756d6d69,0x6d69656e,0x74636170,0x6f706d69,0x6d696573,0x766f7270,0x706d6965,0x65736c75,0x68636e69,0x6c636e69,0x69656475,0x6d6f636e,0x636e6965,
0x73616572,0x646e6965,0x6e697865,0x61636964,0x6e696574,0x726f6f64,0x75646e69,0x79727473,0x61666e69,0x6e69746e,0x63696c66,0x666e6974,0x696d726f,0x6c61686e,0x686e6965,0x74697265,0x74696e69,0x696c6169,0x63656a6e,0x6a6e6974,
0x69797275,0x74616d6e,0x6e6e6965,0x6e697265,0x65636f6e,0x6e69746e,0x69747570,0x6975716e,0x6e697972,0x656e6173,0x65736e69,0x6e697463,0x65646973,0x70736e69,0x69657269,0x6174736e,0x6e696c6c,0x74636174,0x65746e69,0x74736572,
0x6f746e69,0x65766e69,0x6e697473,0x65746976,0x6f766e69,0x6965766c,0x696e6f72,0x6e616c73,0x6f736964,0x6574616c,0x75737369,0x65746965,0x6f76696d,0x616a7972,0x74656b63,0x7567616a,0x616a7261,0x7a616a72,0x61656a7a,0x73756f6c,
0x6e61656a,0x6c656a73,0x656a796c,0x6a6c6577,0x6f6a626f,0x6f6a6e69,0x6f6a656b,0x656e7275,0x796f6a79,0x6764756a,0x69756a65,0x756a6563,0x756a706d,0x656c676e,0x696e756a,0x756a726f,0x756a6b6e,0x616b7473,0x7261676e,0x656b6f6f,
0x656b6e65,0x656b7065,0x75686374,0x79656b70,0x6b63696b,0x6b64696b,0x656e6469,0x6e696b79,0x6e696b64,0x6d6f6467,0x7373696b,0x6b74696b,0x68637469,0x696b6e65,0x696b6574,0x6e657474,0x6977696b,0x65656e6b,0x66696e6b,0x6f6e6b65,
0x6e6b6b63,0x616c776f,0x62616c62,0x616c6c65,0x6c726f62,0x65646461,0x64616c72,0x6b616c79,0x6d616c65,0x6e616c70,0x67617567,0x70616c65,0x6c706f74,0x65677261,0x6574616c,0x74616c72,0x616c6e69,0x6c686775,0x646e7561,0x616c7972,
0x616c6176,0x77616c77,0x77616c6e,0x74697573,0x6579616c,0x7a616c72,0x61656c79,0x6c726564,0x6c666165,0x6e726165,0x7661656c,0x63656c65,0x65727574,0x7466656c,0x6c67656c,0x6c616765,0x6567656c,0x656c646e,0x72757369,0x6d656c65,
0x656c6e6f,0x656c646e,0x6874676e,0x736e656c,0x706f656c,0x6c647261,0x6f737365,0x74656c6e,0x6c726574,0x6c657665,0x7261696c,0x6562696c,0x6c797472,0x61726269,0x696c7972,0x736e6563,0x66696c65,0x66696c65,0x67696c74,0x696c7468,
0x696c656b,0x696c626d,0x6c74696d,0x6c6b6e69,0x6c6e6f69,0x69757169,0x73696c64,0x74696c74,0x6c656c74,0x6c657669,0x72617a69,0x616f6c64,0x616f6c64,0x626f6c6e,0x72657473,0x61636f6c,0x636f6c6c,0x676f6c6b,0x6f6c6369,0x796c656e,
0x676e6f6c,0x706f6f6c,0x74746f6c,0x6c797265,0x6c64756f,0x676e756f,0x766f6c65,0x796f6c65,0x756c6c61,0x6c796b63,0x61676775,0x756c6567,0x7265626d,0x616e756c,0x6e756c72,0x756c6863,0x79727578,0x6972796c,0x616d7363,0x6e696863,
0x64616d65,0x6967616d,0x67616d63,0x6d74656e,0x6d646961,0x6d6c6961,0x6d6e6961,0x726f6a61,0x656b616d,0x6d6d616d,0x616d6c61,0x6e616d6e,0x6d656761,0x61646e61,0x616d6574,0x6d6f676e,0x69736e61,0x616d6e6f,0x6c61756e,0x6c70616d,
0x72616d65,0x6d656c62,0x68637261,0x6772616d,0x616d6e69,0x656e6972,0x6b72616d,0x616d7465,0x61697272,0x616d6567,0x616d6b73,0x616d7373,0x72657473,0x6374616d,0x74616d68,0x61697265,0x74616d6c,0x74616d68,0x6d786972,0x65747461,
0x78616d72,0x6d756d69,0x657a616d,0x6461656d,0x656d776f,0x656d6e61,0x72757361,0x61656d65,0x63656d74,0x696e6168,0x64656d63,0x656d6c61,0x6d616964,0x646f6c65,0x6c656d79,0x6d656d74,0x6d726562,0x726f6d65,0x6e656d79,0x6e6f6974,
0x756e656d,0x6372656d,0x72656d79,0x656d6567,0x6d746972,0x79727265,0x6873656d,0x7373656d,0x6d656761,0x6c617465,0x6874656d,0x696d646f,0x656c6464,0x6e64696d,0x74686769,0x6b6c696d,0x6c6c696d,0x6d6e6f69,0x63696d69,0x646e696d,
0x696e696d,0x6d6d756d,0x726f6e69,0x756e696d,0x696d6574,0x6c636172,0x72696d65,0x6d726f72,0x72657369,0x73696d79,0x73696d73,0x656b6174,0x6d78696d,0x64657869,0x7478696d,0x6d657275,0x6c69626f,0x646f6d65,0x6f6d6c65,0x79666964,
0x6d6d6f6d,0x6e656d6f,0x6e6f6d74,0x726f7469,0x6b6e6f6d,0x6f6d7965,0x6574736e,0x6e6f6d72,0x6f6d6874,0x6f6d6e6f,0x6d6c6172,0x6d65726f,0x696e726f,0x6f6d676e,0x69757173,0x6f6d6f74,0x72656874,0x69746f6d,0x6f6d6e6f,0x6d726f74,
0x746e756f,0x6d6e6961,0x6573756f,0x65766f6d,0x69766f6d,0x63756d65,0x66756d68,0x6d6e6966,0x6d656c75,0x69746c75,0x6d796c70,0x6c637375,0x73756d65,0x6d6d7565,0x72687375,0x6d6d6f6f,0x63697375,0x7473756d,0x7574756d,0x796d6c61,
0x666c6573,0x7473796d,0x6d797265,0x6e687479,0x65766961,0x656d616e,0x6b70616e,0x616e6e69,0x776f7272,0x7473616e,0x74616e79,0x6e6e6f69,0x72757461,0x61656e65,0x63656e72,0x65656e6b,0x67656e64,0x76697461,0x67656e65,0x7463656c,
0x7469656e,0x6e726568,0x65687065,0x72656e77,0x656e6576,0x656e7473,0x74656e74,0x6b726f77,0x7475656e,0x6e6c6172,0x72657665,0x7377656e,0x7478656e,0x6563696e,0x6867696e,0x626f6e74,0x6f6e656c,0x6e657369,0x6e696d6f,0x6f6e6565,
0x656c646f,0x6d726f6e,0x6f6e6c61,0x6e687472,0x6e65736f,0x6261746f,0x6f6e656c,0x6f6e6574,0x6e696874,0x746f6e67,0x6e656369,0x6c65766f,0x6e776f6e,0x656c6375,0x756e7261,0x7265626d,0x7372756e,0x74756e65,0x6f6b616f,0x6f796562,
0x63656a62,0x6c626f74,0x6f656769,0x75637362,0x626f6572,0x76726573,0x74626f65,0x6f6e6961,0x6f697662,0x636f7375,0x6f727563,0x6e616563,0x6f74636f,0x6f726562,0x6f726f64,0x666f6666,0x6f726566,0x63696666,0x74666f65,0x696f6e65,
0x616b6f6c,0x646c6f79,0x76696c6f,0x796c6f65,0x6369706d,0x74696d6f,0x65636e6f,0x6f656e6f,0x6e6f696e,0x696c6e6f,0x6e6f656e,0x706f796c,0x706f6e65,0x6f617265,0x696e6970,0x706f6e6f,0x65736f70,0x6974706f,0x726f6e6f,0x65676e61,
0x6962726f,0x63726f74,0x64726168,0x6564726f,0x64726f72,0x72616e69,0x67726f79,0x726f6e61,0x746e6569,0x6769726f,0x6c616e69,0x6870726f,0x736f6e61,0x63697274,0x68746f68,0x756f7265,0x6f6f6474,0x74756f72,0x756f7265,0x74757074,
0x7374756f,0x6f656469,0x6f6c6176,0x6f6e6576,0x6f726576,0x776f6e77,0x6f72656e,0x65677978,0x73796f6e,0x6f726574,0x656e6f7a,0x74636170,0x64646170,0x6170656c,0x61706567,0x61707269,0x6563616c,0x6d6c6170,0x646e6170,0x6e617061,
0x61706c65,0x7063696e,0x68746e61,0x61707265,0x70726570,0x64617261,0x72617065,0x70746e65,0x706b7261,0x6f727261,0x72617074,0x61707974,0x61707373,0x70686374,0x70687461,0x65697461,0x6170746e,0x6c6f7274,0x74746170,0x706e7265,
0x65737561,0x65766170,0x6d796170,0x70746e65,0x65636165,0x6e616570,0x65707475,0x65707261,0x6e617361,0x6c657074,0x6e616369,0x706e6570,0x6c616e65,0x65707974,0x6c69636e,0x706f6570,0x6570656c,0x72657070,0x66726570,0x70746365,
0x696d7265,0x72657074,0x706e6f73,0x68707465,0x70656e6f,0x6f746f68,0x61726870,0x68706573,0x63697379,0x69706c61,0x706f6e61,0x696e6369,0x63697063,0x65727574,0x63656970,0x67697065,0x65676970,0x69706e6f,0x69706c6c,0x70746f6c,
0x706b6e69,0x656e6f69,0x69707265,0x69706570,0x6c6f7473,0x63746970,0x7a697068,0x6c70617a,0x70656361,0x656e616c,0x616c7074,0x63697473,0x74616c70,0x616c7065,0x656c7079,0x70657361,0x6764656c,0x756c7065,0x6c706b63,0x6c706775,
0x65676e75,0x6d656f70,0x74656f70,0x6e696f70,0x6c6f7074,0x6f707261,0x6f70656c,0x6563696c,0x646e6f70,0x796e6f70,0x6c6f6f70,0x75706f70,0x7072616c,0x6974726f,0x6f706e6f,0x69746973,0x6f706e6f,0x62697373,0x6f70656c,0x6f707473,
0x6f746174,0x74746f70,0x70797265,0x7265766f,0x6f707974,0x72656477,0x65776f70,0x61727072,0x63697463,0x61727065,0x70657369,0x69646572,0x72707463,0x72656665,0x70657270,0x70657261,0x65736572,0x7270746e,0x79747465,0x76657270,
0x70746e65,0x65636972,0x64697270,0x69727065,0x7972616d,0x6e697270,0x69727074,0x7469726f,0x69727079,0x706e6f73,0x61766972,0x72706574,0x70657a69,0x6c626f72,0x72706d65,0x7365636f,0x6f727073,0x65637564,0x666f7270,0x72707469,
0x6172676f,0x6f72706d,0x7463656a,0x6d6f7270,0x7065746f,0x666f6f72,0x706f7270,0x79747265,0x736f7270,0x70726570,0x65746f72,0x72707463,0x7064756f,0x69766f72,0x75706564,0x63696c62,0x64647570,0x70676e69,0x706c6c75,0x70706c75,
0x65736c75,0x706d7570,0x706e696b,0x68636e75,0x69707570,0x7075706c,0x75707970,0x61686372,0x75706573,0x79746972,0x70727570,0x7065736f,0x65737275,0x68737570,0x70747570,0x6c7a7a75,0x72797065,0x64696d61,0x6c617571,0x71797469,
0x746e6175,0x75716d75,0x65747261,0x65757172,0x6f697473,0x6975716e,0x75716b63,0x75717469,0x75717a69,0x7265746f,0x69626261,0x63617274,0x6e6f6f63,0x65636172,0x6b636172,0x61646172,0x64617272,0x61726f69,0x61726c69,0x61726e69,
0x72657369,0x796c6c61,0x706d6172,0x636e6172,0x6e617268,0x726d6f64,0x65676e61,0x69706172,0x72617264,0x74617265,0x74617265,0x72726568,0x6e657661,0x72776172,0x726f7a61,0x64616572,0x61657279,0x6165726c,0x726e6f73,0x6c656265,
0x75626572,0x72646c69,0x6c616365,0x6365726c,0x65766965,0x69636572,0x65726570,0x64726f63,0x79636572,0x72656c63,0x63756465,0x66657265,0x7463656c,0x6f666572,0x65726d72,0x65737566,0x69676572,0x65726e6f,0x74657267,0x75676572,
0x7272616c,0x63656a65,0x6c657274,0x65727861,0x7361656c,0x6c657265,0x72666569,0x72796c65,0x69616d65,0x6d65726e,0x65626d65,0x6d657272,0x72646e69,0x766f6d65,0x6e657265,0x72726564,0x77656e65,0x746e6572,0x706f6572,0x65726e65,
0x72696170,0x65706572,0x65727461,0x63616c70,0x70657265,0x7274726f,0x69757165,0x65726572,0x65756373,0x65736572,0x656c626d,0x69736572,0x65727473,0x72756f73,0x65726563,0x6e6f7073,0x65726573,0x746c7573,0x69746572,0x65726572,
0x61657274,0x74657274,0x726e7275,0x696e7565,0x65726e6f,0x6c616576,0x69766572,0x65727765,0x64726177,0x74796872,0x69726d68,0x62697262,0x726e6f62,0x72656369,0x72686369,0x72656469,0x65676469,0x6c666972,0x67697265,0x69727468,
0x72646967,0x72676e69,0x72746f69,0x6c707069,0x73697265,0x7469726b,0x726c6175,0x6c617669,0x65766972,0x616f7272,0x616f7264,0x6f727473,0x72746f62,0x7375626f,0x636f7274,0x7274656b,0x6e616d6f,0x6f726563,0x6f72666f,0x65696b6f,
0x6d6f6f72,0x65736f72,0x61746f72,0x6f726574,0x72686775,0x646e756f,0x74756f72,0x796f7265,0x75726c61,0x72656262,0x65647572,0x72677572,0x72656c75,0x75726e75,0x7961776e,0x61727572,0x6461736c,0x64646173,0x6173656c,0x73656e64,
0x66617373,0x69617365,0x6c61736c,0x61736461,0x6e6f6d6c,0x6f6c6173,0x6c61736e,0x6c617374,0x73657475,0x73656d61,0x6c706d61,0x6e617365,0x74617364,0x79667369,0x6f746173,0x73696873,0x65637561,0x73756173,0x73656761,0x73657661,
0x63737961,0x73656c61,0x736e6163,0x65726163,0x74616373,0x73726574,0x656e6563,0x65686373,0x6373656d,0x6c6f6f68,0x65696373,0x7365636e,0x73736963,0x7373726f,0x70726f63,0x736e6f69,0x74756f63,0x61726373,0x72637370,0x736e6565,
0x70697263,0x72637374,0x65736275,0x61657361,0x73686372,0x6f736165,0x6165736e,0x63657374,0x73646e6f,0x65726365,0x63657374,0x6e6f6974,0x75636573,0x79746972,0x64656573,0x6b656573,0x6d676573,0x73746e65,0x63656c65,0x6c657374,
0x6d65736c,0x72616e69,0x696e6573,0x6573726f,0x7365736e,0x65746e65,0x7365636e,0x65697265,0x72657373,0x65636976,0x73736573,0x736e6f69,0x6c747465,0x74657365,0x65737075,0x736e6576,0x6f646168,0x61687377,0x68737466,0x6f6c6c61,
0x61687377,0x68736572,0x68736465,0x736c6c65,0x69726568,0x68736666,0x646c6569,0x66696873,0x69687374,0x6873656e,0x68737069,0x72657669,0x636f6873,0x6f68736b,0x6f687365,0x6873746f,0x6873706f,0x7374726f,0x6c756f68,0x73726564,
0x65766f68,0x69726873,0x6873706d,0x73677572,0x66667568,0x6873656c,0x62697379,0x676e696c,0x6b636973,0x65646973,0x67656973,0x67697365,0x69737468,0x69736e67,0x746e656c,0x6b6c6973,0x6c6c6973,0x6c697379,0x73726576,0x6c696d69,
0x69737261,0x656c706d,0x636e6973,0x6e697365,0x72697367,0x69736e65,0x72657473,0x75746973,0x73657461,0x69737869,0x6b73657a,0x73657461,0x6374656b,0x696b7368,0x6c696b73,0x696b736c,0x696b736e,0x6b737472,0x736c6c75,0x7362616c,
0x736d616c,0x7065656c,0x6e656c73,0x73726564,0x6563696c,0x64696c73,0x696c7365,0x73746867,0x736d696c,0x61676f6c,0x6f6c736e,0x6f6c7374,0x756c7377,0x6d736873,0x736c6c61,0x7472616d,0x6c696d73,0x6f6d7365,0x6d73656b,0x68746f6f,
0x63616e73,0x616e736b,0x6e73656b,0x6e737061,0x73666669,0x73776f6e,0x7370616f,0x6563636f,0x636f7372,0x736c6169,0x736b636f,0x7361646f,0x7374666f,0x72616c6f,0x646c6f73,0x73726569,0x64696c6f,0x756c6f73,0x6e6f6974,0x766c6f73,
0x6d6f7365,0x656e6f65,0x676e6f73,0x6e6f6f73,0x72726f73,0x726f7379,0x756f7374,0x756f736c,0x6f73646e,0x6f737075,0x65637275,0x74756f73,0x61707368,0x70736563,0x73657261,0x69746170,0x70736c61,0x736e7761,0x6b616570,0x63657073,
0x736c6169,0x64656570,0x6c657073,0x6570736c,0x7073646e,0x65726568,0x63697073,0x69707365,0x73726564,0x656b6970,0x6e697073,0x72697073,0x70737469,0x7374696c,0x6c696f70,0x6e6f7073,0x73726f73,0x6e6f6f70,0x726f7073,0x6f707374,
0x72707374,0x70737961,0x64616572,0x69727073,0x7073676e,0x75717379,0x73657261,0x65657571,0x7173657a,0x72726975,0x74736c65,0x656c6261,0x64617473,0x736d7569,0x66666174,0x67617473,0x61747365,0x73737269,0x706d6174,0x6e617473,
0x61747364,0x74737472,0x73657461,0x73796174,0x6b616574,0x65657473,0x6574736c,0x6574736d,0x65747370,0x736f6572,0x6b636974,0x6c697473,0x6974736c,0x7473676e,0x736b636f,0x616d6f74,0x74736863,0x73656e6f,0x6c6f6f74,0x726f7473,
0x6f747379,0x74736576,0x65746172,0x74737967,0x74656572,0x69727473,0x7473656b,0x676e6f72,0x75727473,0x656c6767,0x64757473,0x73746e65,0x66667574,0x6d757473,0x73656c62,0x656c7974,0x6a627573,0x73746365,0x696d6275,0x62757374,
0x73796177,0x65636375,0x75737373,0x75736863,0x6e656464,0x66667573,0x75737265,0x73726167,0x65676775,0x75737473,0x75737469,0x72656d6d,0x736e7573,0x796e6e75,0x736e7573,0x75737465,0x73726570,0x6c707075,0x70757379,0x656d6572,
0x65727573,0x66727573,0x73656361,0x65677275,0x70727573,0x65736972,0x72727573,0x646e756f,0x76727573,0x75737965,0x63657073,0x73757374,0x6e696174,0x6c617773,0x73776f6c,0x706d6177,0x70617773,0x72617773,0x6577736d,0x77737261,
0x73746565,0x74666977,0x6d697773,0x6e697773,0x69777367,0x73686374,0x64726f77,0x626d7973,0x79736c6f,0x6f74706d,0x7279736d,0x79737075,0x6d657473,0x6c626174,0x63617465,0x74656c6b,0x61746761,0x61746c69,0x746e656c,0x6b6c6174,
0x6b6e6174,0x65706174,0x67726174,0x61747465,0x61746b73,0x74657473,0x6f747461,0x7861746f,0x61657469,0x65746863,0x65746d61,0x65746c6c,0x6e65746e,0x74746e61,0x696e6e65,0x6e657473,0x72657474,0x7365746d,0x78657474,0x61687474,
0x68746b6e,0x68747461,0x74656d65,0x746e6568,0x726f6568,0x65687479,0x68746572,0x68747965,0x74676e69,0x74736968,0x67756f68,0x68747468,0x74656572,0x76697268,0x72687465,0x6874776f,0x74626d75,0x646e7568,0x69747265,0x74656b63,
0x65646974,0x65676974,0x6c697472,0x6d697474,0x74726562,0x74656d69,0x74796e69,0x69747069,0x74646572,0x75737369,0x74697465,0x6f74656c,0x74747361,0x6361626f,0x6f746f63,0x74796164,0x6c64646f,0x6f747265,0x676f7465,0x65687465,
0x696f7472,0x7474656c,0x6e656b6f,0x616d6f74,0x6f746f74,0x72726f6d,0x6f74776f,0x6f74656e,0x6575676e,0x696e6f74,0x74746867,0x746c6f6f,0x68746f6f,0x74706f74,0x6369706f,0x70706f74,0x6f74656c,0x74686372,0x616e726f,0x6f746f64,
0x696f7472,0x6f746573,0x6f747373,0x746c6174,0x6972756f,0x6f747473,0x64726177,0x65776f74,0x776f7472,0x796f746e,0x63617274,0x6172746b,0x72746564,0x69666661,0x61727463,0x74636967,0x6e696172,0x6e617274,0x72656673,0x70617274,
0x73617274,0x61727468,0x746c6576,0x74796172,0x74616572,0x65657274,0x6e657274,0x69727464,0x72746c61,0x74656269,0x6b636972,0x67697274,0x74726567,0x746d6972,0x74706972,0x68706f72,0x6f727479,0x656c6275,0x63757274,0x7572746b,
0x75727465,0x7274796c,0x65706d75,0x75727474,0x72747473,0x74687475,0x75747972,0x75746562,0x6f697469,0x6d75746e,0x74656c62,0x74616e75,0x656e6e75,0x7275746c,0x7479656b,0x746e7275,0x6c747275,0x65777465,0x7465766c,0x746e6577,
0x69777479,0x77746563,0x77746e69,0x74747369,0x79746f77,0x79746570,0x61636970,0x6c67756c,0x626d7579,0x6c6c6572,0x616e7561,0x75656c62,0x6177616e,0x6e756572,0x75656c63,0x766f636e,0x6e757265,0x75726564,0x756f646e,0x6961666e,
0x666e7572,0x75646c6f,0x7061686e,0x6e757970,0x726f6669,0x696e756d,0x75657571,0x7574696e,0x6576696e,0x75657372,0x6f6e6b6e,0x6e756e77,0x6b636f6c,0x69746e75,0x756e756c,0x6c617573,0x65766e75,0x70756c69,0x65746164,0x72677075,
0x75656461,0x6c6f6870,0x6f707564,0x7070756e,0x70757265,0x75746573,0x6e616272,0x65677275,0x67617375,0x65737565,0x64657375,0x66657375,0x73756c75,0x73656c65,0x75737573,0x74756c61,0x74696c69,0x63617679,0x76746e61,0x75756361,
0x6761766d,0x61766575,0x7664696c,0x656c6c61,0x6c617679,0x61766576,0x6e61766e,0x76687369,0x726f7061,0x69726176,0x7673756f,0x76747361,0x746c7561,0x69686576,0x76656c63,0x65766c65,0x6e657674,0x76726f64,0x75746e65,0x65766572,
0x7665756e,0x76627265,0x66697265,0x72657679,0x6e6f6973,0x79726576,0x73736576,0x65766c65,0x61726574,0x6169766e,0x76656c62,0x61726269,0x6976746e,0x756f6963,0x63697673,0x79726f74,0x65646976,0x6569766f,0x6c697677,0x6567616c,
0x746e6976,0x76656761,0x696c6f69,0x7269766e,0x6c617574,0x75726976,0x73697673,0x73697661,0x69767469,0x6c617573,0x61746976,0x7669766c,0x6f766469,0x766c6163,0x6563696f,0x64696f76,0x636c6f76,0x766f6e61,0x6d756c6f,0x746f7665,
0x796f7665,0x77656761,0x77656761,0x6e6f6761,0x74696177,0x6b6c6177,0x6c6c6177,0x6e6c6177,0x61777475,0x6177746e,0x72616672,0x72617765,0x7261776d,0x726f6972,0x68736177,0x70736177,0x74736177,0x74617765,0x61777265,0x61776576,
0x61657779,0x7768746c,0x6f706165,0x6165776e,0x61657772,0x776c6573,0x68746165,0x65777265,0x64657762,0x676e6964,0x6b656577,0x77646e65,0x64726965,0x636c6577,0x77656d6f,0x77747365,0x68777465,0x77656c61,0x77746168,0x74616568,
0x65656877,0x6568776c,0x6568776e,0x68776572,0x68777069,0x65707369,0x64697772,0x64697765,0x69776874,0x69776566,0x6977646c,0x69776c6c,0x6e69776e,0x77776f64,0x77656e69,0x77676e69,0x776b6e69,0x656e6e69,0x6e697772,0x77726574,
0x77657269,0x6f647369,0x7369776d,0x73697765,0x74697768,0x7373656e,0x666c6f77,0x616d6f77,0x6e6f776e,0x77726564,0x77646f6f,0x776c6f6f,0x7764726f,0x776b726f,0x646c726f,0x72726f77,0x726f7779,0x72776874,0x72777061,0x776b6365,
0x74736572,0x7277656c,0x77747369,0x65746972,0x6e6f7277,0x72617967,0x61657964,0x6c657972,0x79776f6c,0x6f79756f,0x79676e75,0x6874756f,0x7262657a,0x72657a61,0x6e6f7a6f,0x6f6f7a6);

const K: array<u32,160> = array<u32,160>(
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0xfc19dc6,  0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x6ca6351,  0xe003826f, 0x14292967, 0xa0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x6f067aa,  0x72176fba, 0xa637dc5,  0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817);

fn sha512(W: ptr<function, array<u32, 32>>, IV: ptr<function, array<u32, 16>>) {
  var ahi: u32 = IV[0];
  var alo: u32 = IV[1];
  var bhi: u32 = IV[2];
  var blo: u32 = IV[3];
  var chi: u32 = IV[4];
  var clo: u32 = IV[5];
  var dhi: u32 = IV[6];
  var dlo: u32 = IV[7];
  var ehi: u32 = IV[8];
  var elo: u32 = IV[9];
  var fhi: u32 = IV[10];
  var flo: u32 = IV[11];
  var ghi: u32 = IV[12];
  var glo: u32 = IV[13];
  var hhi: u32 = IV[14];
  var hlo: u32 = IV[15];

  var xhi: u32;
  var xlo: u32;
  var t1_lo: u32;
  var t1_hi: u32;
  var t2_lo: u32;
  var t2_hi: u32;
  var tx1_hi: u32;
  var tx1_lo: u32;
  var tx3_hi: u32;
  var tx3_lo: u32;
  var acc_lo: u32;
  var acc_hi: u32;
  var tmp: u32;

  for (var i: u32 = 0u; i < 32u; i += 16u) {
      t1_lo = hlo + (((elo >> 14) | (ehi << 18)) ^ ((elo >> 18) | (ehi << 14)) ^ ((ehi >> 9) | (elo << 23)));
      t1_hi = hhi + (((ehi >> 14) | (elo << 18)) ^ ((ehi >> 18) | (elo << 14)) ^ ((elo >> 9) | (ehi << 23))) + select(0u, 1u, t1_lo < hlo);
      tmp = (elo & flo) ^ ((~elo) & glo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ehi & fhi) ^ ((~ehi) & ghi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 1];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 0] + select(0u, 1u, t1_lo < tmp);
      tmp = W[i + 1];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[i + 0] + select(0u, 1u, t1_lo < tmp);
      tmp = ((alo >> 28) | (ahi << 4)) ^ ((ahi >> 2) | (alo << 30)) ^ ((ahi >> 7) | (alo << 25));
      t2_lo = tmp + ((alo & blo) ^ (alo & clo) ^ (blo & clo));
      t2_hi = (((ahi >> 28) | (alo << 4)) ^ ((alo >> 2) | (ahi << 30)) ^ ((alo >> 7) | (ahi << 25))) + ((ahi & bhi) ^ (ahi & chi) ^ (bhi & chi)) + select(0u, 1u, t2_lo < tmp);
      dlo += t1_lo;
      dhi += t1_hi + select(0u, 1u, dlo < t1_lo);
      hlo = t1_lo + t2_lo;
      hhi = t1_hi + t2_hi + select(0u, 1u, hlo < t1_lo);

      t1_lo = glo + (((dlo >> 14) | (dhi << 18)) ^ ((dlo >> 18) | (dhi << 14)) ^ ((dhi >> 9) | (dlo << 23)));
      t1_hi = ghi + (((dhi >> 14) | (dlo << 18)) ^ ((dhi >> 18) | (dlo << 14)) ^ ((dlo >> 9) | (dhi << 23))) + select(0u, 1u, t1_lo < glo);
      tmp = (dlo & elo) ^ ((~dlo) & flo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((dhi & ehi) ^ ((~dhi) & fhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 3];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 2] + select(0u, 1u, t1_lo < tmp);
      tmp = W[i + 3];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[i + 2] + select(0u, 1u, t1_lo < tmp);
      tmp = ((hlo >> 28) | (hhi << 4)) ^ ((hhi >> 2) | (hlo << 30)) ^ ((hhi >> 7) | (hlo << 25));
      t2_lo = tmp + ((hlo & alo) ^ (hlo & blo) ^ (alo & blo));
      t2_hi = (((hhi >> 28) | (hlo << 4)) ^ ((hlo >> 2) | (hhi << 30)) ^ ((hlo >> 7) | (hhi << 25))) + ((hhi & ahi) ^ (hhi & bhi) ^ (ahi & bhi)) + select(0u, 1u, t2_lo < tmp);
      clo += t1_lo;
      chi += t1_hi + select(0u, 1u, clo < t1_lo);
      glo = t1_lo + t2_lo;
      ghi = t1_hi + t2_hi + select(0u, 1u, glo < t1_lo);

      t1_lo = flo + (((clo >> 14) | (chi << 18)) ^ ((clo >> 18) | (chi << 14)) ^ ((chi >> 9) | (clo << 23)));
      t1_hi = fhi + (((chi >> 14) | (clo << 18)) ^ ((chi >> 18) | (clo << 14)) ^ ((clo >> 9) | (chi << 23))) + select(0u, 1u, t1_lo < flo);
      tmp = (clo & dlo) ^ ((~clo) & elo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((chi & dhi) ^ ((~chi) & ehi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 5];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 4] + select(0u, 1u, t1_lo < tmp);
      tmp = W[i + 5];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[i + 4] + select(0u, 1u, t1_lo < tmp);
      tmp = ((glo >> 28) | (ghi << 4)) ^ ((ghi >> 2) | (glo << 30)) ^ ((ghi >> 7) | (glo << 25));
      t2_lo = tmp + ((glo & hlo) ^ (glo & alo) ^ (hlo & alo));
      t2_hi = (((ghi >> 28) | (glo << 4)) ^ ((glo >> 2) | (ghi << 30)) ^ ((glo >> 7) | (ghi << 25))) + ((ghi & hhi) ^ (ghi & ahi) ^ (hhi & ahi)) + select(0u, 1u, t2_lo < tmp);
      blo += t1_lo;
      bhi += t1_hi + select(0u, 1u, blo < t1_lo);
      flo = t1_lo + t2_lo;
      fhi = t1_hi + t2_hi + select(0u, 1u, flo < t1_lo);

      t1_lo = elo + (((blo >> 14) | (bhi << 18)) ^ ((blo >> 18) | (bhi << 14)) ^ ((bhi >> 9) | (blo << 23)));
      t1_hi = ehi + (((bhi >> 14) | (blo << 18)) ^ ((bhi >> 18) | (blo << 14)) ^ ((blo >> 9) | (bhi << 23))) + select(0u, 1u, t1_lo < elo);
      tmp = (blo & clo) ^ ((~blo) & dlo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((bhi & chi) ^ ((~bhi) & dhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 7];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 6] + select(0u, 1u, t1_lo < tmp);
      tmp = W[i + 7];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[i + 6] + select(0u, 1u, t1_lo < tmp);
      tmp = ((flo >> 28) | (fhi << 4)) ^ ((fhi >> 2) | (flo << 30)) ^ ((fhi >> 7) | (flo << 25));
      t2_lo = tmp + ((flo & glo) ^ (flo & hlo) ^ (glo & hlo));
      t2_hi = (((fhi >> 28) | (flo << 4)) ^ ((flo >> 2) | (fhi << 30)) ^ ((flo >> 7) | (fhi << 25))) + ((fhi & ghi) ^ (fhi & hhi) ^ (ghi & hhi)) + select(0u, 1u, t2_lo < tmp);
      alo += t1_lo;
      ahi += t1_hi + select(0u, 1u, alo < t1_lo);
      elo = t1_lo + t2_lo;
      ehi = t1_hi + t2_hi + select(0u, 1u, elo < t1_lo);

      t1_lo = dlo + (((alo >> 14) | (ahi << 18)) ^ ((alo >> 18) | (ahi << 14)) ^ ((ahi >> 9) | (alo << 23)));
      t1_hi = dhi + (((ahi >> 14) | (alo << 18)) ^ ((ahi >> 18) | (alo << 14)) ^ ((alo >> 9) | (ahi << 23))) + select(0u, 1u, t1_lo < dlo);
      tmp = (alo & blo) ^ ((~alo) & clo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ahi & bhi) ^ ((~ahi) & chi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 9];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 8] + select(0u, 1u, t1_lo < tmp);
      tmp = W[i + 9];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[i + 8] + select(0u, 1u, t1_lo < tmp);
      tmp = ((elo >> 28) | (ehi << 4)) ^ ((ehi >> 2) | (elo << 30)) ^ ((ehi >> 7) | (elo << 25));
      t2_lo = tmp + ((elo & flo) ^ (elo & glo) ^ (flo & glo));
      t2_hi = (((ehi >> 28) | (elo << 4)) ^ ((elo >> 2) | (ehi << 30)) ^ ((elo >> 7) | (ehi << 25))) + ((ehi & fhi) ^ (ehi & ghi) ^ (fhi & ghi)) + select(0u, 1u, t2_lo < tmp);
      hlo += t1_lo;
      hhi += t1_hi + select(0u, 1u, hlo < t1_lo);
      dlo = t1_lo + t2_lo;
      dhi = t1_hi + t2_hi + select(0u, 1u, dlo < t1_lo);

      t1_lo = clo + (((hlo >> 14) | (hhi << 18)) ^ ((hlo >> 18) | (hhi << 14)) ^ ((hhi >> 9) | (hlo << 23)));
      t1_hi = chi + (((hhi >> 14) | (hlo << 18)) ^ ((hhi >> 18) | (hlo << 14)) ^ ((hlo >> 9) | (hhi << 23))) + select(0u, 1u, t1_lo < clo);
      tmp = (hlo & alo) ^ ((~hlo) & blo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((hhi & ahi) ^ ((~hhi) & bhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 11];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 10] + select(0u, 1u, t1_lo < tmp);
      tmp = W[i + 11];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[i + 10] + select(0u, 1u, t1_lo < tmp);
      tmp = ((dlo >> 28) | (dhi << 4)) ^ ((dhi >> 2) | (dlo << 30)) ^ ((dhi >> 7) | (dlo << 25));
      t2_lo = tmp + ((dlo & elo) ^ (dlo & flo) ^ (elo & flo));
      t2_hi = (((dhi >> 28) | (dlo << 4)) ^ ((dlo >> 2) | (dhi << 30)) ^ ((dlo >> 7) | (dhi << 25))) + ((dhi & ehi) ^ (dhi & fhi) ^ (ehi & fhi)) + select(0u, 1u, t2_lo < tmp);
      glo += t1_lo;
      ghi += t1_hi + select(0u, 1u, glo < t1_lo);
      clo = t1_lo + t2_lo;
      chi = t1_hi + t2_hi + select(0u, 1u, clo < t1_lo);

      t1_lo = blo + (((glo >> 14) | (ghi << 18)) ^ ((glo >> 18) | (ghi << 14)) ^ ((ghi >> 9) | (glo << 23)));
      t1_hi = bhi + (((ghi >> 14) | (glo << 18)) ^ ((ghi >> 18) | (glo << 14)) ^ ((glo >> 9) | (ghi << 23))) + select(0u, 1u, t1_lo < blo);
      tmp = (glo & hlo) ^ ((~glo) & alo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ghi & hhi) ^ ((~ghi) & ahi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 13];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 12] + select(0u, 1u, t1_lo < tmp);
      tmp = W[i + 13];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[i + 12] + select(0u, 1u, t1_lo < tmp);
      tmp = ((clo >> 28) | (chi << 4)) ^ ((chi >> 2) | (clo << 30)) ^ ((chi >> 7) | (clo << 25));
      t2_lo = tmp + ((clo & dlo) ^ (clo & elo) ^ (dlo & elo));
      t2_hi = (((chi >> 28) | (clo << 4)) ^ ((clo >> 2) | (chi << 30)) ^ ((clo >> 7) | (chi << 25))) + ((chi & dhi) ^ (chi & ehi) ^ (dhi & ehi)) + select(0u, 1u, t2_lo < tmp);
      flo += t1_lo;
      fhi += t1_hi + select(0u, 1u, flo < t1_lo);
      blo = t1_lo + t2_lo;
      bhi = t1_hi + t2_hi + select(0u, 1u, blo < t1_lo);

      t1_lo = alo + (((flo >> 14) | (fhi << 18)) ^ ((flo >> 18) | (fhi << 14)) ^ ((fhi >> 9) | (flo << 23)));
      t1_hi = ahi + (((fhi >> 14) | (flo << 18)) ^ ((fhi >> 18) | (flo << 14)) ^ ((flo >> 9) | (fhi << 23))) + select(0u, 1u, t1_lo < alo);
      tmp = (flo & glo) ^ ((~flo) & hlo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((fhi & ghi) ^ ((~fhi) & hhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 15];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 14] + select(0u, 1u, t1_lo < tmp);
      tmp = W[i + 15];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[i + 14] + select(0u, 1u, t1_lo < tmp);
      tmp = ((blo >> 28) | (bhi << 4)) ^ ((bhi >> 2) | (blo << 30)) ^ ((bhi >> 7) | (blo << 25));
      t2_lo = tmp + ((blo & clo) ^ (blo & dlo) ^ (clo & dlo));
      t2_hi = (((bhi >> 28) | (blo << 4)) ^ ((blo >> 2) | (bhi << 30)) ^ ((blo >> 7) | (bhi << 25))) + ((bhi & chi) ^ (bhi & dhi) ^ (chi & dhi)) + select(0u, 1u, t2_lo < tmp);
      elo += t1_lo;
      ehi += t1_hi + select(0u, 1u, elo < t1_lo);
      alo = t1_lo + t2_lo;
      ahi = t1_hi + t2_hi + select(0u, 1u, alo < t1_lo);
  }

  for (var i: u32 = 32u; i < 160u; i += 32u) {
      xhi = W[28];
      xlo = W[29];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[2];
      xlo = W[3];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[19] + W[1];
      acc_hi = W[18] + W[0] + select(0u, 1u, acc_lo < W[19]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[0] = acc_hi;
      W[1] = acc_lo;

      t1_lo = hlo + (((elo >> 14) | (ehi << 18)) ^ ((elo >> 18) | (ehi << 14)) ^ ((ehi >> 9) | (elo << 23)));
      t1_hi = hhi + (((ehi >> 14) | (elo << 18)) ^ ((ehi >> 18) | (elo << 14)) ^ ((elo >> 9) | (ehi << 23))) + select(0u, 1u, t1_lo < hlo);
      tmp = (elo & flo) ^ ((~elo) & glo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ehi & fhi) ^ ((~ehi) & ghi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 1];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 0] + select(0u, 1u, t1_lo < tmp);
      tmp = W[1];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[0] + select(0u, 1u, t1_lo < tmp);
      tmp = ((alo >> 28) | (ahi << 4)) ^ ((ahi >> 2) | (alo << 30)) ^ ((ahi >> 7) | (alo << 25));
      t2_lo = tmp + ((alo & blo) ^ (alo & clo) ^ (blo & clo));
      t2_hi = (((ahi >> 28) | (alo << 4)) ^ ((alo >> 2) | (ahi << 30)) ^ ((alo >> 7) | (ahi << 25))) + ((ahi & bhi) ^ (ahi & chi) ^ (bhi & chi)) + select(0u, 1u, t2_lo < tmp);
      dlo += t1_lo;
      dhi += t1_hi + select(0u, 1u, dlo < t1_lo);
      hlo = t1_lo + t2_lo;
      hhi = t1_hi + t2_hi + select(0u, 1u, hlo < t1_lo);

      xhi = W[30];
      xlo = W[31];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[4];
      xlo = W[5];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[21] + W[3];
      acc_hi = W[20] + W[2] + select(0u, 1u, acc_lo < W[21]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[2] = acc_hi;
      W[3] = acc_lo;

      t1_lo = glo + (((dlo >> 14) | (dhi << 18)) ^ ((dlo >> 18) | (dhi << 14)) ^ ((dhi >> 9) | (dlo << 23)));
      t1_hi = ghi + (((dhi >> 14) | (dlo << 18)) ^ ((dhi >> 18) | (dlo << 14)) ^ ((dlo >> 9) | (dhi << 23))) + select(0u, 1u, t1_lo < glo);
      tmp = (dlo & elo) ^ ((~dlo) & flo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((dhi & ehi) ^ ((~dhi) & fhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 3];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 2] + select(0u, 1u, t1_lo < tmp);
      tmp = W[3];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[2] + select(0u, 1u, t1_lo < tmp);
      tmp = ((hlo >> 28) | (hhi << 4)) ^ ((hhi >> 2) | (hlo << 30)) ^ ((hhi >> 7) | (hlo << 25));
      t2_lo = tmp + ((hlo & alo) ^ (hlo & blo) ^ (alo & blo));
      t2_hi = (((hhi >> 28) | (hlo << 4)) ^ ((hlo >> 2) | (hhi << 30)) ^ ((hlo >> 7) | (hhi << 25))) + ((hhi & ahi) ^ (hhi & bhi) ^ (ahi & bhi)) + select(0u, 1u, t2_lo < tmp);
      clo += t1_lo;
      chi += t1_hi + select(0u, 1u, clo < t1_lo);
      glo = t1_lo + t2_lo;
      ghi = t1_hi + t2_hi + select(0u, 1u, glo < t1_lo);

      xhi = W[0];
      xlo = W[1];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[6];
      xlo = W[7];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[23] + W[5];
      acc_hi = W[22] + W[4] + select(0u, 1u, acc_lo < W[23]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[4] = acc_hi;
      W[5] = acc_lo;

      t1_lo = flo + (((clo >> 14) | (chi << 18)) ^ ((clo >> 18) | (chi << 14)) ^ ((chi >> 9) | (clo << 23)));
      t1_hi = fhi + (((chi >> 14) | (clo << 18)) ^ ((chi >> 18) | (clo << 14)) ^ ((clo >> 9) | (chi << 23))) + select(0u, 1u, t1_lo < flo);
      tmp = (clo & dlo) ^ ((~clo) & elo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((chi & dhi) ^ ((~chi) & ehi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 5];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 4] + select(0u, 1u, t1_lo < tmp);
      tmp = W[5];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[4] + select(0u, 1u, t1_lo < tmp);
      tmp = ((glo >> 28) | (ghi << 4)) ^ ((ghi >> 2) | (glo << 30)) ^ ((ghi >> 7) | (glo << 25));
      t2_lo = tmp + ((glo & hlo) ^ (glo & alo) ^ (hlo & alo));
      t2_hi = (((ghi >> 28) | (glo << 4)) ^ ((glo >> 2) | (ghi << 30)) ^ ((glo >> 7) | (ghi << 25))) + ((ghi & hhi) ^ (ghi & ahi) ^ (hhi & ahi)) + select(0u, 1u, t2_lo < tmp);
      blo += t1_lo;
      bhi += t1_hi + select(0u, 1u, blo < t1_lo);
      flo = t1_lo + t2_lo;
      fhi = t1_hi + t2_hi + select(0u, 1u, flo < t1_lo);

      xhi = W[2];
      xlo = W[3];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[8];
      xlo = W[9];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[25] + W[7];
      acc_hi = W[24] + W[6] + select(0u, 1u, acc_lo < W[25]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[6] = acc_hi;
      W[7] = acc_lo;

      t1_lo = elo + (((blo >> 14) | (bhi << 18)) ^ ((blo >> 18) | (bhi << 14)) ^ ((bhi >> 9) | (blo << 23)));
      t1_hi = ehi + (((bhi >> 14) | (blo << 18)) ^ ((bhi >> 18) | (blo << 14)) ^ ((blo >> 9) | (bhi << 23))) + select(0u, 1u, t1_lo < elo);
      tmp = (blo & clo) ^ ((~blo) & dlo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((bhi & chi) ^ ((~bhi) & dhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 7];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 6] + select(0u, 1u, t1_lo < tmp);
      tmp = W[7];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[6] + select(0u, 1u, t1_lo < tmp);
      tmp = ((flo >> 28) | (fhi << 4)) ^ ((fhi >> 2) | (flo << 30)) ^ ((fhi >> 7) | (flo << 25));
      t2_lo = tmp + ((flo & glo) ^ (flo & hlo) ^ (glo & hlo));
      t2_hi = (((fhi >> 28) | (flo << 4)) ^ ((flo >> 2) | (fhi << 30)) ^ ((flo >> 7) | (fhi << 25))) + ((fhi & ghi) ^ (fhi & hhi) ^ (ghi & hhi)) + select(0u, 1u, t2_lo < tmp);
      alo += t1_lo;
      ahi += t1_hi + select(0u, 1u, alo < t1_lo);
      elo = t1_lo + t2_lo;
      ehi = t1_hi + t2_hi + select(0u, 1u, elo < t1_lo);

      xhi = W[4];
      xlo = W[5];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[10];
      xlo = W[11];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[27] + W[9];
      acc_hi = W[26] + W[8] + select(0u, 1u, acc_lo < W[27]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[8] = acc_hi;
      W[9] = acc_lo;

      t1_lo = dlo + (((alo >> 14) | (ahi << 18)) ^ ((alo >> 18) | (ahi << 14)) ^ ((ahi >> 9) | (alo << 23)));
      t1_hi = dhi + (((ahi >> 14) | (alo << 18)) ^ ((ahi >> 18) | (alo << 14)) ^ ((alo >> 9) | (ahi << 23))) + select(0u, 1u, t1_lo < dlo);
      tmp = (alo & blo) ^ ((~alo) & clo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ahi & bhi) ^ ((~ahi) & chi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 9];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 8] + select(0u, 1u, t1_lo < tmp);
      tmp = W[9];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[8] + select(0u, 1u, t1_lo < tmp);
      tmp = ((elo >> 28) | (ehi << 4)) ^ ((ehi >> 2) | (elo << 30)) ^ ((ehi >> 7) | (elo << 25));
      t2_lo = tmp + ((elo & flo) ^ (elo & glo) ^ (flo & glo));
      t2_hi = (((ehi >> 28) | (elo << 4)) ^ ((elo >> 2) | (ehi << 30)) ^ ((elo >> 7) | (ehi << 25))) + ((ehi & fhi) ^ (ehi & ghi) ^ (fhi & ghi)) + select(0u, 1u, t2_lo < tmp);
      hlo += t1_lo;
      hhi += t1_hi + select(0u, 1u, hlo < t1_lo);
      dlo = t1_lo + t2_lo;
      dhi = t1_hi + t2_hi + select(0u, 1u, dlo < t1_lo);

      xhi = W[6];
      xlo = W[7];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[12];
      xlo = W[13];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[29] + W[11];
      acc_hi = W[28] + W[10] + select(0u, 1u, acc_lo < W[29]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[10] = acc_hi;
      W[11] = acc_lo;

      t1_lo = clo + (((hlo >> 14) | (hhi << 18)) ^ ((hlo >> 18) | (hhi << 14)) ^ ((hhi >> 9) | (hlo << 23)));
      t1_hi = chi + (((hhi >> 14) | (hlo << 18)) ^ ((hhi >> 18) | (hlo << 14)) ^ ((hlo >> 9) | (hhi << 23))) + select(0u, 1u, t1_lo < clo);
      tmp = (hlo & alo) ^ ((~hlo) & blo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((hhi & ahi) ^ ((~hhi) & bhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 11];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 10] + select(0u, 1u, t1_lo < tmp);
      tmp = W[11];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[10] + select(0u, 1u, t1_lo < tmp);
      tmp = ((dlo >> 28) | (dhi << 4)) ^ ((dhi >> 2) | (dlo << 30)) ^ ((dhi >> 7) | (dlo << 25));
      t2_lo = tmp + ((dlo & elo) ^ (dlo & flo) ^ (elo & flo));
      t2_hi = (((dhi >> 28) | (dlo << 4)) ^ ((dlo >> 2) | (dhi << 30)) ^ ((dlo >> 7) | (dhi << 25))) + ((dhi & ehi) ^ (dhi & fhi) ^ (ehi & fhi)) + select(0u, 1u, t2_lo < tmp);
      glo += t1_lo;
      ghi += t1_hi + select(0u, 1u, glo < t1_lo);
      clo = t1_lo + t2_lo;
      chi = t1_hi + t2_hi + select(0u, 1u, clo < t1_lo);

      xhi = W[8];
      xlo = W[9];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[14];
      xlo = W[15];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[31] + W[13];
      acc_hi = W[30] + W[12] + select(0u, 1u, acc_lo < W[31]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[12] = acc_hi;
      W[13] = acc_lo;

      t1_lo = blo + (((glo >> 14) | (ghi << 18)) ^ ((glo >> 18) | (ghi << 14)) ^ ((ghi >> 9) | (glo << 23)));
      t1_hi = bhi + (((ghi >> 14) | (glo << 18)) ^ ((ghi >> 18) | (glo << 14)) ^ ((glo >> 9) | (ghi << 23))) + select(0u, 1u, t1_lo < blo);
      tmp = (glo & hlo) ^ ((~glo) & alo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ghi & hhi) ^ ((~ghi) & ahi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 13];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 12] + select(0u, 1u, t1_lo < tmp);
      tmp = W[13];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[12] + select(0u, 1u, t1_lo < tmp);
      tmp = ((clo >> 28) | (chi << 4)) ^ ((chi >> 2) | (clo << 30)) ^ ((chi >> 7) | (clo << 25));
      t2_lo = tmp + ((clo & dlo) ^ (clo & elo) ^ (dlo & elo));
      t2_hi = (((chi >> 28) | (clo << 4)) ^ ((clo >> 2) | (chi << 30)) ^ ((clo >> 7) | (chi << 25))) + ((chi & dhi) ^ (chi & ehi) ^ (dhi & ehi)) + select(0u, 1u, t2_lo < tmp);
      flo += t1_lo;
      fhi += t1_hi + select(0u, 1u, flo < t1_lo);
      blo = t1_lo + t2_lo;
      bhi = t1_hi + t2_hi + select(0u, 1u, blo < t1_lo);

      xhi = W[10];
      xlo = W[11];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[16];
      xlo = W[17];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[1] + W[15];
      acc_hi = W[0] + W[14] + select(0u, 1u, acc_lo < W[1]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[14] = acc_hi;
      W[15] = acc_lo;

      t1_lo = alo + (((flo >> 14) | (fhi << 18)) ^ ((flo >> 18) | (fhi << 14)) ^ ((fhi >> 9) | (flo << 23)));
      t1_hi = ahi + (((fhi >> 14) | (flo << 18)) ^ ((fhi >> 18) | (flo << 14)) ^ ((flo >> 9) | (fhi << 23))) + select(0u, 1u, t1_lo < alo);
      tmp = (flo & glo) ^ ((~flo) & hlo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((fhi & ghi) ^ ((~fhi) & hhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 15];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 14] + select(0u, 1u, t1_lo < tmp);
      tmp = W[15];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[14] + select(0u, 1u, t1_lo < tmp);
      tmp = ((blo >> 28) | (bhi << 4)) ^ ((bhi >> 2) | (blo << 30)) ^ ((bhi >> 7) | (blo << 25));
      t2_lo = tmp + ((blo & clo) ^ (blo & dlo) ^ (clo & dlo));
      t2_hi = (((bhi >> 28) | (blo << 4)) ^ ((blo >> 2) | (bhi << 30)) ^ ((blo >> 7) | (bhi << 25))) + ((bhi & chi) ^ (bhi & dhi) ^ (chi & dhi)) + select(0u, 1u, t2_lo < tmp);
      elo += t1_lo;
      ehi += t1_hi + select(0u, 1u, elo < t1_lo);
      alo = t1_lo + t2_lo;
      ahi = t1_hi + t2_hi + select(0u, 1u, alo < t1_lo);

      xhi = W[12];
      xlo = W[13];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[18];
      xlo = W[19];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[3] + W[17];
      acc_hi = W[2] + W[16] + select(0u, 1u, acc_lo < W[3]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[16] = acc_hi;
      W[17] = acc_lo;

      t1_lo = hlo + (((elo >> 14) | (ehi << 18)) ^ ((elo >> 18) | (ehi << 14)) ^ ((ehi >> 9) | (elo << 23)));
      t1_hi = hhi + (((ehi >> 14) | (elo << 18)) ^ ((ehi >> 18) | (elo << 14)) ^ ((elo >> 9) | (ehi << 23))) + select(0u, 1u, t1_lo < hlo);
      tmp = (elo & flo) ^ ((~elo) & glo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ehi & fhi) ^ ((~ehi) & ghi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 17];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 16] + select(0u, 1u, t1_lo < tmp);
      tmp = W[17];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[16] + select(0u, 1u, t1_lo < tmp);
      tmp = ((alo >> 28) | (ahi << 4)) ^ ((ahi >> 2) | (alo << 30)) ^ ((ahi >> 7) | (alo << 25));
      t2_lo = tmp + ((alo & blo) ^ (alo & clo) ^ (blo & clo));
      t2_hi = (((ahi >> 28) | (alo << 4)) ^ ((alo >> 2) | (ahi << 30)) ^ ((alo >> 7) | (ahi << 25))) + ((ahi & bhi) ^ (ahi & chi) ^ (bhi & chi)) + select(0u, 1u, t2_lo < tmp);
      dlo += t1_lo;
      dhi += t1_hi + select(0u, 1u, dlo < t1_lo);
      hlo = t1_lo + t2_lo;
      hhi = t1_hi + t2_hi + select(0u, 1u, hlo < t1_lo);

      xhi = W[14];
      xlo = W[15];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[20];
      xlo = W[21];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[5] + W[19];
      acc_hi = W[4] + W[18] + select(0u, 1u, acc_lo < W[5]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[18] = acc_hi;
      W[19] = acc_lo;

      t1_lo = glo + (((dlo >> 14) | (dhi << 18)) ^ ((dlo >> 18) | (dhi << 14)) ^ ((dhi >> 9) | (dlo << 23)));
      t1_hi = ghi + (((dhi >> 14) | (dlo << 18)) ^ ((dhi >> 18) | (dlo << 14)) ^ ((dlo >> 9) | (dhi << 23))) + select(0u, 1u, t1_lo < glo);
      tmp = (dlo & elo) ^ ((~dlo) & flo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((dhi & ehi) ^ ((~dhi) & fhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 19];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 18] + select(0u, 1u, t1_lo < tmp);
      tmp = W[19];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[18] + select(0u, 1u, t1_lo < tmp);
      tmp = ((hlo >> 28) | (hhi << 4)) ^ ((hhi >> 2) | (hlo << 30)) ^ ((hhi >> 7) | (hlo << 25));
      t2_lo = tmp + ((hlo & alo) ^ (hlo & blo) ^ (alo & blo));
      t2_hi = (((hhi >> 28) | (hlo << 4)) ^ ((hlo >> 2) | (hhi << 30)) ^ ((hlo >> 7) | (hhi << 25))) + ((hhi & ahi) ^ (hhi & bhi) ^ (ahi & bhi)) + select(0u, 1u, t2_lo < tmp);
      clo += t1_lo;
      chi += t1_hi + select(0u, 1u, clo < t1_lo);
      glo = t1_lo + t2_lo;
      ghi = t1_hi + t2_hi + select(0u, 1u, glo < t1_lo);

      xhi = W[16];
      xlo = W[17];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[22];
      xlo = W[23];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[7] + W[21];
      acc_hi = W[6] + W[20] + select(0u, 1u, acc_lo < W[7]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[20] = acc_hi;
      W[21] = acc_lo;

      t1_lo = flo + (((clo >> 14) | (chi << 18)) ^ ((clo >> 18) | (chi << 14)) ^ ((chi >> 9) | (clo << 23)));
      t1_hi = fhi + (((chi >> 14) | (clo << 18)) ^ ((chi >> 18) | (clo << 14)) ^ ((clo >> 9) | (chi << 23))) + select(0u, 1u, t1_lo < flo);
      tmp = (clo & dlo) ^ ((~clo) & elo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((chi & dhi) ^ ((~chi) & ehi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 21];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 20] + select(0u, 1u, t1_lo < tmp);
      tmp = W[21];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[20] + select(0u, 1u, t1_lo < tmp);
      tmp = ((glo >> 28) | (ghi << 4)) ^ ((ghi >> 2) | (glo << 30)) ^ ((ghi >> 7) | (glo << 25));
      t2_lo = tmp + ((glo & hlo) ^ (glo & alo) ^ (hlo & alo));
      t2_hi = (((ghi >> 28) | (glo << 4)) ^ ((glo >> 2) | (ghi << 30)) ^ ((glo >> 7) | (ghi << 25))) + ((ghi & hhi) ^ (ghi & ahi) ^ (hhi & ahi)) + select(0u, 1u, t2_lo < tmp);
      blo += t1_lo;
      bhi += t1_hi + select(0u, 1u, blo < t1_lo);
      flo = t1_lo + t2_lo;
      fhi = t1_hi + t2_hi + select(0u, 1u, flo < t1_lo);

      xhi = W[18];
      xlo = W[19];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[24];
      xlo = W[25];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[9] + W[23];
      acc_hi = W[8] + W[22] + select(0u, 1u, acc_lo < W[9]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[22] = acc_hi;
      W[23] = acc_lo;

      t1_lo = elo + (((blo >> 14) | (bhi << 18)) ^ ((blo >> 18) | (bhi << 14)) ^ ((bhi >> 9) | (blo << 23)));
      t1_hi = ehi + (((bhi >> 14) | (blo << 18)) ^ ((bhi >> 18) | (blo << 14)) ^ ((blo >> 9) | (bhi << 23))) + select(0u, 1u, t1_lo < elo);
      tmp = (blo & clo) ^ ((~blo) & dlo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((bhi & chi) ^ ((~bhi) & dhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 23];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 22] + select(0u, 1u, t1_lo < tmp);
      tmp = W[23];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[22] + select(0u, 1u, t1_lo < tmp);
      tmp = ((flo >> 28) | (fhi << 4)) ^ ((fhi >> 2) | (flo << 30)) ^ ((fhi >> 7) | (flo << 25));
      t2_lo = tmp + ((flo & glo) ^ (flo & hlo) ^ (glo & hlo));
      t2_hi = (((fhi >> 28) | (flo << 4)) ^ ((flo >> 2) | (fhi << 30)) ^ ((flo >> 7) | (fhi << 25))) + ((fhi & ghi) ^ (fhi & hhi) ^ (ghi & hhi)) + select(0u, 1u, t2_lo < tmp);
      alo += t1_lo;
      ahi += t1_hi + select(0u, 1u, alo < t1_lo);
      elo = t1_lo + t2_lo;
      ehi = t1_hi + t2_hi + select(0u, 1u, elo < t1_lo);

      xhi = W[20];
      xlo = W[21];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[26];
      xlo = W[27];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[11] + W[25];
      acc_hi = W[10] + W[24] + select(0u, 1u, acc_lo < W[11]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[24] = acc_hi;
      W[25] = acc_lo;

      t1_lo = dlo + (((alo >> 14) | (ahi << 18)) ^ ((alo >> 18) | (ahi << 14)) ^ ((ahi >> 9) | (alo << 23)));
      t1_hi = dhi + (((ahi >> 14) | (alo << 18)) ^ ((ahi >> 18) | (alo << 14)) ^ ((alo >> 9) | (ahi << 23))) + select(0u, 1u, t1_lo < dlo);
      tmp = (alo & blo) ^ ((~alo) & clo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ahi & bhi) ^ ((~ahi) & chi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 25];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 24] + select(0u, 1u, t1_lo < tmp);
      tmp = W[25];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[24] + select(0u, 1u, t1_lo < tmp);
      tmp = ((elo >> 28) | (ehi << 4)) ^ ((ehi >> 2) | (elo << 30)) ^ ((ehi >> 7) | (elo << 25));
      t2_lo = tmp + ((elo & flo) ^ (elo & glo) ^ (flo & glo));
      t2_hi = (((ehi >> 28) | (elo << 4)) ^ ((elo >> 2) | (ehi << 30)) ^ ((elo >> 7) | (ehi << 25))) + ((ehi & fhi) ^ (ehi & ghi) ^ (fhi & ghi)) + select(0u, 1u, t2_lo < tmp);
      hlo += t1_lo;
      hhi += t1_hi + select(0u, 1u, hlo < t1_lo);
      dlo = t1_lo + t2_lo;
      dhi = t1_hi + t2_hi + select(0u, 1u, dlo < t1_lo);

      xhi = W[22];
      xlo = W[23];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[28];
      xlo = W[29];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[13] + W[27];
      acc_hi = W[12] + W[26] + select(0u, 1u, acc_lo < W[13]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[26] = acc_hi;
      W[27] = acc_lo;

      t1_lo = clo + (((hlo >> 14) | (hhi << 18)) ^ ((hlo >> 18) | (hhi << 14)) ^ ((hhi >> 9) | (hlo << 23)));
      t1_hi = chi + (((hhi >> 14) | (hlo << 18)) ^ ((hhi >> 18) | (hlo << 14)) ^ ((hlo >> 9) | (hhi << 23))) + select(0u, 1u, t1_lo < clo);
      tmp = (hlo & alo) ^ ((~hlo) & blo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((hhi & ahi) ^ ((~hhi) & bhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 27];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 26] + select(0u, 1u, t1_lo < tmp);
      tmp = W[27];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[26] + select(0u, 1u, t1_lo < tmp);
      tmp = ((dlo >> 28) | (dhi << 4)) ^ ((dhi >> 2) | (dlo << 30)) ^ ((dhi >> 7) | (dlo << 25));
      t2_lo = tmp + ((dlo & elo) ^ (dlo & flo) ^ (elo & flo));
      t2_hi = (((dhi >> 28) | (dlo << 4)) ^ ((dlo >> 2) | (dhi << 30)) ^ ((dlo >> 7) | (dhi << 25))) + ((dhi & ehi) ^ (dhi & fhi) ^ (ehi & fhi)) + select(0u, 1u, t2_lo < tmp);
      glo += t1_lo;
      ghi += t1_hi + select(0u, 1u, glo < t1_lo);
      clo = t1_lo + t2_lo;
      chi = t1_hi + t2_hi + select(0u, 1u, clo < t1_lo);

      xhi = W[24];
      xlo = W[25];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[30];
      xlo = W[31];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[15] + W[29];
      acc_hi = W[14] + W[28] + select(0u, 1u, acc_lo < W[15]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[28] = acc_hi;
      W[29] = acc_lo;

      t1_lo = blo + (((glo >> 14) | (ghi << 18)) ^ ((glo >> 18) | (ghi << 14)) ^ ((ghi >> 9) | (glo << 23)));
      t1_hi = bhi + (((ghi >> 14) | (glo << 18)) ^ ((ghi >> 18) | (glo << 14)) ^ ((glo >> 9) | (ghi << 23))) + select(0u, 1u, t1_lo < blo);
      tmp = (glo & hlo) ^ ((~glo) & alo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((ghi & hhi) ^ ((~ghi) & ahi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 29];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 28] + select(0u, 1u, t1_lo < tmp);
      tmp = W[29];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[28] + select(0u, 1u, t1_lo < tmp);
      tmp = ((clo >> 28) | (chi << 4)) ^ ((chi >> 2) | (clo << 30)) ^ ((chi >> 7) | (clo << 25));
      t2_lo = tmp + ((clo & dlo) ^ (clo & elo) ^ (dlo & elo));
      t2_hi = (((chi >> 28) | (clo << 4)) ^ ((clo >> 2) | (chi << 30)) ^ ((clo >> 7) | (chi << 25))) + ((chi & dhi) ^ (chi & ehi) ^ (dhi & ehi)) + select(0u, 1u, t2_lo < tmp);
      flo += t1_lo;
      fhi += t1_hi + select(0u, 1u, flo < t1_lo);
      blo = t1_lo + t2_lo;
      bhi = t1_hi + t2_hi + select(0u, 1u, blo < t1_lo);

      xhi = W[26];
      xlo = W[27];
      tx1_hi = ((xhi >> 19) | (xlo << 13)) ^ ((xlo >> 29) | (xhi << 3)) ^ (xhi >> 6);
      tx1_lo = ((xlo >> 19) | (xhi << 13)) ^ ((xhi >> 29) | (xlo << 3)) ^ ((xlo >> 6) | (xhi << 26));
      xhi = W[0];
      xlo = W[1];
      tx3_hi = ((xhi >> 1) | (xlo << 31)) ^ ((xhi >> 8) | (xlo << 24)) ^ (xhi >> 7);
      tx3_lo = ((xlo >> 1) | (xhi << 31)) ^ ((xlo >> 8) | (xhi << 24)) ^ ((xlo >> 7) | (xhi << 25));
      acc_lo = W[17] + W[31];
      acc_hi = W[16] + W[30] + select(0u, 1u, acc_lo < W[17]);
      acc_lo = acc_lo + tx1_lo;
      acc_hi = acc_hi + tx1_hi + select(0u, 1u, acc_lo < tx1_lo);
      acc_lo = acc_lo + tx3_lo;
      acc_hi = acc_hi + tx3_hi + select(0u, 1u, acc_lo < tx3_lo);
      W[30] = acc_hi;
      W[31] = acc_lo;

      t1_lo = alo + (((flo >> 14) | (fhi << 18)) ^ ((flo >> 18) | (fhi << 14)) ^ ((fhi >> 9) | (flo << 23)));
      t1_hi = ahi + (((fhi >> 14) | (flo << 18)) ^ ((fhi >> 18) | (flo << 14)) ^ ((flo >> 9) | (fhi << 23))) + select(0u, 1u, t1_lo < alo);
      tmp = (flo & glo) ^ ((~flo) & hlo);
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + ((fhi & ghi) ^ ((~fhi) & hhi)) + select(0u, 1u, t1_lo < tmp);
      tmp = K[i + 31];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + K[i + 30] + select(0u, 1u, t1_lo < tmp);
      tmp = W[31];
      t1_lo = t1_lo + tmp;
      t1_hi = t1_hi + W[30] + select(0u, 1u, t1_lo < tmp);
      tmp = ((blo >> 28) | (bhi << 4)) ^ ((bhi >> 2) | (blo << 30)) ^ ((bhi >> 7) | (blo << 25));
      t2_lo = tmp + ((blo & clo) ^ (blo & dlo) ^ (clo & dlo));
      t2_hi = (((bhi >> 28) | (blo << 4)) ^ ((blo >> 2) | (bhi << 30)) ^ ((blo >> 7) | (bhi << 25))) + ((bhi & chi) ^ (bhi & dhi) ^ (chi & dhi)) + select(0u, 1u, t2_lo < tmp);
      elo += t1_lo;
      ehi += t1_hi + select(0u, 1u, elo < t1_lo);
      alo = t1_lo + t2_lo;
      ahi = t1_hi + t2_hi + select(0u, 1u, alo < t1_lo);
  }

  alo += IV[1];
  ahi += IV[0] + select(0u, 1u, alo < IV[1]);
  blo += IV[3];
  bhi += IV[2] + select(0u, 1u, blo < IV[3]);
  clo += IV[5];
  chi += IV[4] + select(0u, 1u, clo < IV[5]);
  dlo += IV[7];
  dhi += IV[6] + select(0u, 1u, dlo < IV[7]);
  elo += IV[9];
  ehi += IV[8] + select(0u, 1u, elo < IV[9]);
  flo += IV[11];
  fhi += IV[10] + select(0u, 1u, flo < IV[11]);
  glo += IV[13];
  ghi += IV[12] + select(0u, 1u, glo < IV[13]);
  hlo += IV[15];
  hhi += IV[14] + select(0u, 1u, hlo < IV[15]);

  W[0] = ahi;
  W[1] = alo;
  W[2] = bhi;
  W[3] = blo;
  W[4] = chi;
  W[5] = clo;
  W[6] = dhi;
  W[7] = dlo;
  W[8] = ehi;
  W[9] = elo;
  W[10] = fhi;
  W[11] = flo;
  W[12] = ghi;
  W[13] = glo;
  W[14] = hhi;
  W[15] = hlo;
}

const masks = array<u32, 4>(0x00ffffff, 0xff00ffff, 0xffff00ff, 0xffffff00);
fn setByteArr(arr: ptr<function, array<u32, 32>>, idx: u32, byte: u32) {
  let i = idx/4;
  let sh = idx%4;
  arr[i] = (arr[i] & masks[sh]) + (byte << (24 - sh * 8));
}

fn getBIP39Byte(idx: u32) -> u32 {
  return (BIP39[idx/4] >> ((idx%4) * 8)) & 0xff;
}

const MASK = MASK__;
const MASKLEN = MASKLEN__;

fn permutation(N: u32) -> array<u32, 12> {
    var perm: array<u32, 12>;
    var curOff = 0u;
    var n = N;
    for (var i = 0; i < 12; i++) {
        if (MASKLEN[i] == 2048) {
            perm[11 - i] = n % 2048;
        } else {
            perm[11 - i] = MASK[curOff + n % MASKLEN[i]];
            curOff += MASKLEN[i];
        }
        n = n / MASKLEN[i];
    }
    return perm;
}

fn setSeed(res: ptr<function, array<u32, 32>>, N: u32) {
  let perm = permutation(N);
  for (var i = 0; i < 32; i++) { res[i] = 0; }
  var curOffset = 0u;
  for (var j = 0u; j < 12u; j++) {
    var index = perm[j];
    for (var i = BIP39[index]; i < BIP39[index + 1]; i++) {
      setByteArr(res, curOffset, getBIP39Byte(i));
      curOffset++;
    }
    if (j != 11) {
      setByteArr(res, curOffset, 0x20u);
      curOffset++;
    }
  }
}

fn initSeeds(tmp_buf: ptr<function, array<u32, 32>>, seed1: ptr<function, array<u32, 16>>, seed2: ptr<function, array<u32, 16>>, N: u32) {
  var IV = array<u32,16>(
      0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b,
      0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,
      0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f,
      0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,
  );
  setSeed(tmp_buf, N);
  for (var i: u32 = 0u; i < 32u; i += 1u) { tmp_buf[i] = tmp_buf[i] ^ 0x36363636; }
  sha512(tmp_buf, &IV);
  for (var i: u32 = 0u; i < 16u; i += 1u) { seed1[i] = tmp_buf[i]; }
  setSeed(tmp_buf, N);
  for (var i: u32 = 0u; i < 32u; i += 1u) { tmp_buf[i] = tmp_buf[i] ^ 0x5c5c5c5c; }
  sha512(tmp_buf, &IV);
  for (var i: u32 = 0u; i < 16u; i += 1u) { seed2[i] = tmp_buf[i]; }
}

fn initBuffer(tmp_buf: ptr<function, array<u32, 32>>, seed1: ptr<function, array<u32, 16>>, seed2: ptr<function, array<u32, 16>>) {
  for (var i = 0; i < 32; i += 1) { tmp_buf[i] = 0; }
  tmp_buf[0] = 0x6d6e656d; // mnem
  tmp_buf[1] = 0x6f6e6963; // onic
  setByteArr(tmp_buf, 11, 0x01);
  setByteArr(tmp_buf, 12, 0x80);
  tmp_buf[31] = 140 * 8;
  sha512(tmp_buf, seed1);
  for (var i = 16; i < 32; i += 1) { tmp_buf[i] = 0; }
  tmp_buf[16] = 0x80000000;
  tmp_buf[31] = 192 * 8;
  sha512(tmp_buf, seed2);
}

struct Input {
    curOffset: u32,
    indices: array<u32>,
};

@group(0) @binding(0) var<storage, read> input: Input;
@group(0) @binding(1) var<storage, read_write> output: array<u32>;

@compute @workgroup_size(WORKGROUP_SIZE)
fn main(@builtin(global_invocation_id) gid: vec3<u32>) {
  var tmp_buf: array<u32, 32>;
  var seed1: array<u32, 16>;
  var seed2: array<u32, 16>;
  var dk: array<u32, 16>;
  // initSeeds(&tmp_buf, &seed1, &seed2, input.indices[input.curOffset + gid.x]);
  // initSeeds(&tmp_buf, &seed1, &seed2, 6556);
  initSeeds(&tmp_buf, &seed1, &seed2, gid.x);
  initBuffer(&tmp_buf, &seed1, &seed2);

  for (var i = 0; i < 16; i += 1) { dk[i] = tmp_buf[i]; }

  for (var i = 1; i < 2048; i += 1) {

      tmp_buf[16] = 0x80000000;
      for (var i = 17; i < 31; i += 1) { tmp_buf[i] = 0; }
      tmp_buf[31] = 192 * 8;
      sha512(&tmp_buf, &seed1);

      tmp_buf[16] = 0x80000000;
      for (var i = 17; i < 31; i += 1) { tmp_buf[i] = 0; }
      tmp_buf[31] = 192 * 8;
      sha512(&tmp_buf, &seed2);

      for (var i = 0; i < 16; i += 1) { dk[i] ^= tmp_buf[i]; }
  }
  for (var i: u32 = 0; i < 16; i += 1) {
    output[gid.x * 16u + i] = dk[i];
  }
}

